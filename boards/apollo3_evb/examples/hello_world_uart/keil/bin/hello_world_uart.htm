<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\bin\hello_world_uart.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\bin\hello_world_uart.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jun 21 23:35:03 2023
<BR><P>
<H3>Maximum Stack Usage =       2536 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; smtc_modem_run_engine &rArr; modem_supervisor_engine &rArr; certification_event_handler &rArr; smtc_modem_set_certification_mode &rArr; smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[1f]">am_adc_isr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">am_adc_isr</a><BR>
 <LI><a href="#[11c]">am_hal_debug_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11c]">am_hal_debug_error</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from am_util_faultisr.o(.emb_text) referenced from startup_keil.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[92]">__main</a> from __main.o(!!!main) referenced from startup_keil.o(RESET)
 <LI><a href="#[30]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[2f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[2e]">_sputc</a> from _sputc.o(.text) referenced from vsprintf.o(.text)
 <LI><a href="#[1f]">am_adc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[19]">am_ble_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[d]">am_brownout_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2c]">am_clkgen_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1b]">am_ctimer_isr</a> from smtc_hal_lp_timer.o(i.am_ctimer_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[1a]">am_gpio_isr</a> from smtc_hal_gpio.o(i.am_gpio_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[13]">am_iomaster0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[14]">am_iomaster1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[15]">am_iomaster2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[16]">am_iomaster3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[17]">am_iomaster4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[18]">am_iomaster5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[12]">am_ioslave_acc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[11]">am_ioslave_ios_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[21]">am_mspi0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[20]">am_pdm0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[f]">am_rtc_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1e]">am_scard_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[22]">am_software0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[24]">am_stimer_cmpr0_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[25]">am_stimer_cmpr1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[26]">am_stimer_cmpr2_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[27]">am_stimer_cmpr3_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[28]">am_stimer_cmpr4_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[29]">am_stimer_cmpr5_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2a]">am_stimer_cmpr6_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[2b]">am_stimer_cmpr7_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[23]">am_stimer_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1d]">am_uart1_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[1c]">am_uart_isr</a> from main.o(i.am_uart_isr) referenced from startup_keil.o(RESET)
 <LI><a href="#[10]">am_vcomp_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[e]">am_watchdog_isr</a> from startup_keil.o(RESET) referenced from startup_keil.o(RESET)
 <LI><a href="#[49]">callback_rp_user_radio_access_0</a> from smtc_modem.o(i.callback_rp_user_radio_access_0) referenced from smtc_modem.o(i.smtc_modem_init)
 <LI><a href="#[4a]">callback_rp_user_radio_access_1</a> from smtc_modem.o(i.callback_rp_user_radio_access_1) referenced from smtc_modem.o(i.smtc_modem_init)
 <LI><a href="#[4b]">callback_rp_user_radio_access_2</a> from smtc_modem.o(i.callback_rp_user_radio_access_2) referenced from smtc_modem.o(i.smtc_modem_init)
 <LI><a href="#[47]">empty_callback</a> from smtc_modem.o(i.empty_callback) referenced from smtc_modem.o(i.smtc_modem_init)
 <LI><a href="#[52]">get_event</a> from tx_rx_test.o(i.get_event) referenced from tx_rx_test.o(i.test_radio)
 <LI><a href="#[34]">lorawan_api_class_a_downlink_callback</a> from lorawan_api.o(i.lorawan_api_class_a_downlink_callback) referenced from lorawan_api.o(i.lorawan_api_init)
 <LI><a href="#[39]">lorawan_api_class_b_beacon_callback</a> from lorawan_api.o(i.lorawan_api_class_b_beacon_callback) referenced from lorawan_api.o(i.lorawan_api_init)
 <LI><a href="#[37]">lorawan_api_class_b_downlink_callback</a> from lorawan_api.o(i.lorawan_api_class_b_downlink_callback) referenced from lorawan_api.o(i.lorawan_api_init)
 <LI><a href="#[35]">lorawan_api_class_c_downlink_callback</a> from lorawan_api.o(i.lorawan_api_class_c_downlink_callback) referenced from lorawan_api.o(i.lorawan_api_init)
 <LI><a href="#[4f]">lr1_stack_mac_radio_abort_lbt</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_radio_abort_lbt) referenced from smtc_real.o(i.smtc_real_config)
 <LI><a href="#[50]">lr1_stack_mac_radio_busy_lbt</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_radio_busy_lbt) referenced from smtc_real.o(i.smtc_real_config)
 <LI><a href="#[40]">lr1_stack_mac_rp_callback</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_rp_callback) referenced from lr1mac_core.o(i.lr1mac_core_init)
 <LI><a href="#[3b]">lr1_stack_mac_rx_gfsk_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_gfsk_launch_callback_for_rp) referenced from lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_radio_start)
 <LI><a href="#[3b]">lr1_stack_mac_rx_gfsk_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_gfsk_launch_callback_for_rp) referenced from lr1mac_class_c.o(i.lr1mac_class_c_launch)
 <LI><a href="#[3b]">lr1_stack_mac_rx_gfsk_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_gfsk_launch_callback_for_rp) referenced from smtc_ping_slot.o(i.smtc_ping_slot_start)
 <LI><a href="#[3a]">lr1_stack_mac_rx_lora_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_lora_launch_callback_for_rp) referenced from lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_radio_start)
 <LI><a href="#[3a]">lr1_stack_mac_rx_lora_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_lora_launch_callback_for_rp) referenced from lr1mac_class_c.o(i.lr1mac_class_c_launch)
 <LI><a href="#[3d]">lr1_stack_mac_tx_gfsk_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_gfsk_launch_callback_for_rp) referenced from lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_start)
 <LI><a href="#[3c]">lr1_stack_mac_tx_lora_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_lora_launch_callback_for_rp) referenced from lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_start)
 <LI><a href="#[3e]">lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp) referenced from lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_start)
 <LI><a href="#[51]">lr1_stack_mac_tx_radio_free_lbt</a> from lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_free_lbt) referenced from smtc_real.o(i.smtc_real_config)
 <LI><a href="#[36]">lr1mac_class_c_mac_rp_callback</a> from lr1mac_class_c.o(i.lr1mac_class_c_mac_rp_callback) referenced from lorawan_api.o(i.lorawan_api_init)
 <LI><a href="#[3f]">lr1mac_class_c_rp_callback</a> from lr1mac_class_c.o(i.lr1mac_class_c_rp_callback) referenced from lr1mac_class_c.o(i.lr1mac_class_c_init)
 <LI><a href="#[91]">modem_context_empty_callback</a> from modem_context.o(i.modem_context_empty_callback) referenced 2 times from modem_context.o(.constdata)
 <LI><a href="#[4e]">ping_slot_mac_rx_lora_launch_callback_for_rp</a> from smtc_ping_slot.o(i.ping_slot_mac_rx_lora_launch_callback_for_rp) referenced from smtc_ping_slot.o(i.smtc_ping_slot_start)
 <LI><a href="#[63]">ral_sx128x_cal_img</a> from ral_sx128x.o(i.ral_sx128x_cal_img) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[5c]">ral_sx128x_cfg_rx_boosted</a> from ral_sx128x.o(i.ral_sx128x_cfg_rx_boosted) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[68]">ral_sx128x_clear_irq_status</a> from ral_sx128x.o(i.ral_sx128x_clear_irq_status) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[69]">ral_sx128x_get_and_clear_irq_status</a> from ral_sx128x.o(i.ral_sx128x_get_and_clear_irq_status) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[78]">ral_sx128x_get_flrc_rx_pkt_status</a> from ral_sx128x.o(i.ral_sx128x_get_flrc_rx_pkt_status) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[7c]">ral_sx128x_get_flrc_time_on_air_in_ms</a> from ral_sx128x.o(i.ral_sx128x_get_flrc_time_on_air_in_ms) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[8b]">ral_sx128x_get_gfsk_rx_consumption_in_ua</a> from ral_sx128x.o(i.ral_sx128x_get_gfsk_rx_consumption_in_ua) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[76]">ral_sx128x_get_gfsk_rx_pkt_status</a> from ral_sx128x.o(i.ral_sx128x_get_gfsk_rx_pkt_status) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[7b]">ral_sx128x_get_gfsk_time_on_air_in_ms</a> from ral_sx128x.o(i.ral_sx128x_get_gfsk_time_on_air_in_ms) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[67]">ral_sx128x_get_irq_status</a> from ral_sx128x.o(i.ral_sx128x_get_irq_status) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[8c]">ral_sx128x_get_lora_rx_consumption_in_ua</a> from ral_sx128x.o(i.ral_sx128x_get_lora_rx_consumption_in_ua) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[89]">ral_sx128x_get_lora_rx_pkt_cr_crc</a> from ral_sx128x.o(i.ral_sx128x_get_lora_rx_pkt_cr_crc) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[77]">ral_sx128x_get_lora_rx_pkt_status</a> from ral_sx128x.o(i.ral_sx128x_get_lora_rx_pkt_status) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[7a]">ral_sx128x_get_lora_time_on_air_in_ms</a> from ral_sx128x.o(i.ral_sx128x_get_lora_time_on_air_in_ms) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[66]">ral_sx128x_get_pkt_payload</a> from ral_sx128x.o(i.ral_sx128x_get_pkt_payload) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[6d]">ral_sx128x_get_pkt_type</a> from ral_sx128x.o(i.ral_sx128x_get_pkt_type) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[8d]">ral_sx128x_get_random_numbers</a> from ral_sx128x.o(i.ral_sx128x_get_random_numbers) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[79]">ral_sx128x_get_rssi_inst</a> from ral_sx128x.o(i.ral_sx128x_get_rssi_inst) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[8a]">ral_sx128x_get_tx_consumption_in_ua</a> from ral_sx128x.o(i.ral_sx128x_get_tx_consumption_in_ua) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[53]">ral_sx128x_handles_part</a> from ral_sx128x.o(i.ral_sx128x_handles_part) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[55]">ral_sx128x_init</a> from ral_sx128x.o(i.ral_sx128x_init) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[84]">ral_sx128x_lr_fhss_build_frame</a> from ral_sx128x.o(i.ral_sx128x_lr_fhss_build_frame) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[88]">ral_sx128x_lr_fhss_get_hop_sequence_count</a> from ral_sx128x.o(i.ral_sx128x_lr_fhss_get_hop_sequence_count) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[87]">ral_sx128x_lr_fhss_get_time_on_air_in_ms</a> from ral_sx128x.o(i.ral_sx128x_lr_fhss_get_time_on_air_in_ms) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[85]">ral_sx128x_lr_fhss_handle_hop</a> from ral_sx128x.o(i.ral_sx128x_lr_fhss_handle_hop) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[86]">ral_sx128x_lr_fhss_handle_tx_done</a> from ral_sx128x.o(i.ral_sx128x_lr_fhss_handle_tx_done) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[83]">ral_sx128x_lr_fhss_init</a> from ral_sx128x.o(i.ral_sx128x_lr_fhss_init) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[54]">ral_sx128x_reset</a> from ral_sx128x.o(i.ral_sx128x_reset) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[6a]">ral_sx128x_set_dio_irq_params</a> from ral_sx128x.o(i.ral_sx128x_set_dio_irq_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[81]">ral_sx128x_set_flrc_crc_params</a> from ral_sx128x.o(i.ral_sx128x_set_flrc_crc_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[74]">ral_sx128x_set_flrc_mod_params</a> from ral_sx128x.o(i.ral_sx128x_set_flrc_mod_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[75]">ral_sx128x_set_flrc_pkt_params</a> from ral_sx128x.o(i.ral_sx128x_set_flrc_pkt_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[7f]">ral_sx128x_set_flrc_sync_word</a> from ral_sx128x.o(i.ral_sx128x_set_flrc_sync_word) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[59]">ral_sx128x_set_fs</a> from ral_sx128x.o(i.ral_sx128x_set_fs) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[80]">ral_sx128x_set_gfsk_crc_params</a> from ral_sx128x.o(i.ral_sx128x_set_gfsk_crc_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[6e]">ral_sx128x_set_gfsk_mod_params</a> from ral_sx128x.o(i.ral_sx128x_set_gfsk_mod_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[6f]">ral_sx128x_set_gfsk_pkt_params</a> from ral_sx128x.o(i.ral_sx128x_set_gfsk_pkt_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[7d]">ral_sx128x_set_gfsk_sync_word</a> from ral_sx128x.o(i.ral_sx128x_set_gfsk_sync_word) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[82]">ral_sx128x_set_gfsk_whitening_seed</a> from ral_sx128x.o(i.ral_sx128x_set_gfsk_whitening_seed) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[60]">ral_sx128x_set_lora_cad</a> from ral_sx128x.o(i.ral_sx128x_set_lora_cad) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[72]">ral_sx128x_set_lora_cad_params</a> from ral_sx128x.o(i.ral_sx128x_set_lora_cad_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[70]">ral_sx128x_set_lora_mod_params</a> from ral_sx128x.o(i.ral_sx128x_set_lora_mod_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[71]">ral_sx128x_set_lora_pkt_params</a> from ral_sx128x.o(i.ral_sx128x_set_lora_pkt_params) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[73]">ral_sx128x_set_lora_symb_nb_timeout</a> from ral_sx128x.o(i.ral_sx128x_set_lora_symb_nb_timeout) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[7e]">ral_sx128x_set_lora_sync_word</a> from ral_sx128x.o(i.ral_sx128x_set_lora_sync_word) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[65]">ral_sx128x_set_pkt_payload</a> from ral_sx128x.o(i.ral_sx128x_set_pkt_payload) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[6c]">ral_sx128x_set_pkt_type</a> from ral_sx128x.o(i.ral_sx128x_set_pkt_type) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[6b]">ral_sx128x_set_rf_freq</a> from ral_sx128x.o(i.ral_sx128x_set_rf_freq) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[5b]">ral_sx128x_set_rx</a> from ral_sx128x.o(i.ral_sx128x_set_rx) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[5f]">ral_sx128x_set_rx_duty_cycle</a> from ral_sx128x.o(i.ral_sx128x_set_rx_duty_cycle) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[5d]">ral_sx128x_set_rx_tx_fallback_mode</a> from ral_sx128x.o(i.ral_sx128x_set_rx_tx_fallback_mode) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[57]">ral_sx128x_set_sleep</a> from ral_sx128x.o(i.ral_sx128x_set_sleep) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[58]">ral_sx128x_set_standby</a> from ral_sx128x.o(i.ral_sx128x_set_standby) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[5a]">ral_sx128x_set_tx</a> from ral_sx128x.o(i.ral_sx128x_set_tx) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[64]">ral_sx128x_set_tx_cfg</a> from ral_sx128x.o(i.ral_sx128x_set_tx_cfg) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[61]">ral_sx128x_set_tx_cw</a> from ral_sx128x.o(i.ral_sx128x_set_tx_cw) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[62]">ral_sx128x_set_tx_infinite_preamble</a> from ral_sx128x.o(i.ral_sx128x_set_tx_infinite_preamble) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[5e]">ral_sx128x_stop_timer_on_preamble</a> from ral_sx128x.o(i.ral_sx128x_stop_timer_on_preamble) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[56]">ral_sx128x_wakeup</a> from ral_sx128x.o(i.ral_sx128x_wakeup) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[90]">ralf_sx128x_setup_flrc</a> from ralf_sx128x.o(i.ralf_sx128x_setup_flrc) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[8e]">ralf_sx128x_setup_gfsk</a> from ralf_sx128x.o(i.ralf_sx128x_setup_gfsk) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[8f]">ralf_sx128x_setup_lora</a> from ralf_sx128x.o(i.ralf_sx128x_setup_lora) referenced from tx_rx_test.o(.constdata)
 <LI><a href="#[46]">rp_radio_irq_callback</a> from radio_planner.o(i.rp_radio_irq_callback) referenced from smtc_modem.o(i.smtc_modem_init)
 <LI><a href="#[42]">rp_timer_irq_callback</a> from radio_planner.o(i.rp_timer_irq_callback) referenced from radio_planner.o(i.rp_set_alarm)
 <LI><a href="#[31]">smtc_beacon_sniff_launch_callback_for_rp</a> from smtc_beacon_sniff.o(i.smtc_beacon_sniff_launch_callback_for_rp) referenced from smtc_beacon_sniff.o(i.beacon_rp_request)
 <LI><a href="#[43]">smtc_beacon_sniff_rp_callback</a> from smtc_beacon_sniff.o(i.smtc_beacon_sniff_rp_callback) referenced from smtc_beacon_sniff.o(i.smtc_beacon_sniff_init)
 <LI><a href="#[45]">smtc_lbt_launch_callback_for_rp</a> from smtc_lbt.o(i.smtc_lbt_launch_callback_for_rp) referenced from smtc_lbt.o(i.smtc_lbt_listen_channel)
 <LI><a href="#[44]">smtc_lbt_rp_callback</a> from smtc_lbt.o(i.smtc_lbt_rp_callback) referenced from smtc_lbt.o(i.smtc_lbt_init)
 <LI><a href="#[38]">smtc_ping_slot_mac_rp_callback</a> from smtc_ping_slot.o(i.smtc_ping_slot_mac_rp_callback) referenced from lorawan_api.o(i.lorawan_api_init)
 <LI><a href="#[4d]">smtc_ping_slot_rp_callback</a> from smtc_ping_slot.o(i.smtc_ping_slot_rp_callback) referenced from smtc_ping_slot.o(i.smtc_ping_slot_init)
 <LI><a href="#[4c]">test_mode_cw_callback_for_rp</a> from smtc_modem_test.o(i.test_mode_cw_callback_for_rp) referenced from smtc_modem_test.o(i.smtc_modem_test_tx_cw)
 <LI><a href="#[32]">test_timer0</a> from smtc_hal_lp_timer.o(i.test_timer0) referenced from smtc_hal_lp_timer.o(i.hal_lp_timer_start)
 <LI><a href="#[33]">timer1_callback</a> from smtc_hal_rtc.o(i.timer1_callback) referenced from smtc_hal_rtc.o(i.hal_rtc_init)
 <LI><a href="#[41]">uart_print</a> from main.o(i.uart_print) referenced from main.o(i.main)
 <LI><a href="#[48]">user_radio_access_callback</a> from smtc_modem.o(i.user_radio_access_callback) referenced from smtc_modem.o(i.smtc_modem_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>am_adc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_adc_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>am_ble_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>am_brownout_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>am_clkgen_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>am_iomaster0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>am_iomaster1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>am_iomaster2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>am_iomaster3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>am_iomaster4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>am_iomaster5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>am_ioslave_acc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>am_ioslave_ios_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>am_mspi0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>am_pdm0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>am_rtc_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>am_scard_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>am_software0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>am_stimer_cmpr0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>am_stimer_cmpr1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>am_stimer_cmpr2_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>am_stimer_cmpr3_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>am_stimer_cmpr4_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>am_stimer_cmpr5_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>am_stimer_cmpr6_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>am_stimer_cmpr7_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>am_stimer_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>am_uart0_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET), UNUSED, KEPT)

<P><STRONG><a name="[1d]"></a>am_uart1_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>am_vcomp_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>am_watchdog_isr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_keil.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[94]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[96]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3fe]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3ff]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[400]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[401]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[402]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[97]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[e4]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[99]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[9b]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9d]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9e]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[9f]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[403]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[a1]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a3]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a4]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[a5]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[a7]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a9]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ab]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ac]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[ad]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[af]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[404]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[b1]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b3]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[b5]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[b7]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[405]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[c5]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[b9]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[406]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[407]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[bb]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[408]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[bd]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[409]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[40a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[bf]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[40b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[40c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[c0]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[40d]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[40e]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[40f]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[410]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[411]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[412]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[413]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[414]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[415]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[416]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[417]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[418]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[419]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[ca]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[41a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[41b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[41c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[41d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[41e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[41f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[420]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[95]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[421]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[c2]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[c4]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[422]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[c6]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; smtc_modem_run_engine &rArr; modem_supervisor_engine &rArr; certification_event_handler &rArr; smtc_modem_set_certification_mode &rArr; smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[423]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[f3]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[c9]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[424]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[cb]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = HardFault_Handler &rArr; am_util_faultisr_collect_data &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[13b]"></a>getStackedReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_util_faultisr.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[1fd]"></a>am_hal_interrupt_master_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>am_hal_interrupt_master_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_stop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_status_get
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_config_single
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
</UL>

<P><STRONG><a name="[116]"></a>am_hal_interrupt_master_set</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_hal_interrupt.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_stop
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_status_get
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_enable
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_config_single
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
</UL>

<P><STRONG><a name="[205]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rng_get_random
</UL>

<P><STRONG><a name="[f2]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f6]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
</UL>

<P><STRONG><a name="[425]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ce]"></a>vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trace_print
</UL>

<P><STRONG><a name="[d0]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[bc]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[288]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[fb]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_downlink_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_downlink_frame
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_appstatus
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_restore_crashlog
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_sync_word
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_store_context
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_set_key
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_restore_context
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_process_join_accept
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_init
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_set
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_get
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_dr_distribution
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_verify_mic
</UL>

<P><STRONG><a name="[d1]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[426]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_in_out
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_factory_reset
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_get_metadata
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_restore_context
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_select_next
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[427]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[428]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[429]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[d3]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_init
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_sum
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_init
</UL>

<P><STRONG><a name="[d5]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[d4]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_init
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_init
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_store_context
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_devnonce_rst
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_devnonce_reset
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_verify_mic
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_init
</UL>

<P><STRONG><a name="[42a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[351]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_handles_part
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[42c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[42d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[42e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[d8]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[d9]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[da]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[db]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[d7]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[a2]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[98]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[cf]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>

<P><STRONG><a name="[2e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vsprintf.o(.text)
</UL>
<P><STRONG><a name="[de]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[aa]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[e1]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[a6]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[ae]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[e2]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[a8]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[b0]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[9a]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[dd]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[e0]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[dc]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[42f]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[ea]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[ed]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[ee]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[b2]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[b4]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[ef]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[b6]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[b8]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[df]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[c3]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[f0]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[be]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[ec]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[e6]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c8]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[430]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[431]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[432]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[433]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[434]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[cc]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[e7]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[f4]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[f6]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[f7]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[e8]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[e9]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f8]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[f9]"></a>AES_CMAC_Final</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, cmac.o(i.AES_CMAC_Final))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_cmac
</UL>

<P><STRONG><a name="[fc]"></a>AES_CMAC_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cmac.o(i.AES_CMAC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AES_CMAC_Init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_cmac
</UL>

<P><STRONG><a name="[ff]"></a>AES_CMAC_SetKey</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cmac.o(i.AES_CMAC_SetKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = AES_CMAC_SetKey &rArr; aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_cmac
</UL>

<P><STRONG><a name="[101]"></a>AES_CMAC_Update</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, cmac.o(i.AES_CMAC_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AES_CMAC_Update &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_cmac
</UL>

<P><STRONG><a name="[378]"></a>SMTC_ARE_CLR_BYTE8</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lr1mac_utilities.o(i.SMTC_ARE_CLR_BYTE8))
<BR><BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_build_channel_mask
</UL>

<P><STRONG><a name="[104]"></a>SMTC_CLR_BIT16</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.SMTC_CLR_BIT16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMTC_CLR_BIT16
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT16
</UL>

<P><STRONG><a name="[107]"></a>SMTC_CLR_BIT8</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.SMTC_CLR_BIT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMTC_CLR_BIT8
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT8
</UL>

<P><STRONG><a name="[37d]"></a>SMTC_GET_BIT16</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lr1mac_utilities.o(i.SMTC_GET_BIT16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SMTC_GET_BIT16
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_next_channel
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_min_tx_channel_dr
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_dr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_valid
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx_dr_valid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_mask_for_mobile_mode
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_dr
</UL>

<P><STRONG><a name="[376]"></a>SMTC_GET_BIT8</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, lr1mac_utilities.o(i.SMTC_GET_BIT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SMTC_GET_BIT8
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_set_channel_mask
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_next_channel
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_build_channel_mask
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_min_tx_channel_dr
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_current_enabled_frequency_list
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_mask_for_mobile_mode
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_mask_tx_dr_channel
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_enable_all_channels_with_valid_freq
</UL>

<P><STRONG><a name="[102]"></a>SMTC_PUT_BIT16</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.SMTC_PUT_BIT16))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMTC_PUT_BIT16 &rArr; SMTC_SET_BIT16
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_SET_BIT16
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_CLR_BIT16
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_mask_tx_dr_channel_up_dwell_time_check
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_dr
</UL>

<P><STRONG><a name="[105]"></a>SMTC_PUT_BIT8</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.SMTC_PUT_BIT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SMTC_PUT_BIT8 &rArr; SMTC_SET_BIT8
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_SET_BIT8
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_CLR_BIT8
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_build_channel_mask
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_enabled
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_enable_all_channels_with_valid_freq
</UL>

<P><STRONG><a name="[103]"></a>SMTC_SET_BIT16</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.SMTC_SET_BIT16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMTC_SET_BIT16
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT16
</UL>

<P><STRONG><a name="[106]"></a>SMTC_SET_BIT8</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.SMTC_SET_BIT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SMTC_SET_BIT8
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT8
</UL>

<P><STRONG><a name="[eb]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3e6]"></a>__hardfp_ceilf</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_window_parameters
</UL>

<P><STRONG><a name="[435]"></a>__mathlib_ceilf</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ceilf.o(i.__hardfp_ceilf), UNUSED)

<P><STRONG><a name="[e3]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[fa]"></a>aes_encrypt</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, aes.o(i.aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_sub_rows
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_and_key
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
</UL>

<P><STRONG><a name="[100]"></a>aes_set_key</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, aes.o(i.aes_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = aes_set_key &rArr; copy_block_nn
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
</UL>

<P><STRONG><a name="[1b]"></a>am_ctimer_isr</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, smtc_hal_lp_timer.o(i.am_ctimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_ctimer_isr &rArr; am_hal_ctimer_int_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_status_get
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_service
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>am_gpio_isr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, smtc_hal_gpio.o(i.am_gpio_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = am_gpio_isr &rArr; hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>am_hal_cachectrl_config</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, am_hal_cachectrl.o(i.am_hal_cachectrl_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_cachectrl_config
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f9]"></a>am_hal_cachectrl_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, am_hal_cachectrl.o(i.am_hal_cachectrl_enable))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[117]"></a>am_hal_clkgen_control</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, am_hal_clkgen.o(i.am_hal_clkgen_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_clkgen_control
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>am_hal_clkgen_status_get</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, am_hal_clkgen.o(i.am_hal_clkgen_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
</UL>

<P><STRONG><a name="[126]"></a>am_hal_cmdq_disable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, am_hal_cmdq.o(i.am_hal_cmdq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[129]"></a>am_hal_cmdq_enable</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, am_hal_cmdq.o(i.am_hal_cmdq_enable))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
</UL>

<P><STRONG><a name="[124]"></a>am_hal_cmdq_init</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, am_hal_cmdq.o(i.am_hal_cmdq_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = am_hal_cmdq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
</UL>

<P><STRONG><a name="[119]"></a>am_hal_ctimer_config_single</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, am_hal_ctimer.o(i.am_hal_ctimer_config_single))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_ctimer_config_single
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_init
</UL>

<P><STRONG><a name="[10f]"></a>am_hal_ctimer_int_clear</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_ctimer_int_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ctimer_isr
</UL>

<P><STRONG><a name="[11a]"></a>am_hal_ctimer_int_enable</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_ctimer_int_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_init
</UL>

<P><STRONG><a name="[11b]"></a>am_hal_ctimer_int_register</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_ctimer_int_register
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_start
</UL>

<P><STRONG><a name="[110]"></a>am_hal_ctimer_int_service</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_ctimer_int_service
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ctimer_isr
</UL>

<P><STRONG><a name="[10e]"></a>am_hal_ctimer_int_status_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, am_hal_ctimer.o(i.am_hal_ctimer_int_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_ctimer_int_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_ctimer_isr
</UL>

<P><STRONG><a name="[11d]"></a>am_hal_ctimer_period_set</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, am_hal_ctimer.o(i.am_hal_ctimer_period_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_start
</UL>

<P><STRONG><a name="[11e]"></a>am_hal_ctimer_start</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, am_hal_ctimer.o(i.am_hal_ctimer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_ctimer_start
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_start
</UL>

<P><STRONG><a name="[11f]"></a>am_hal_ctimer_stop</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am_hal_ctimer.o(i.am_hal_ctimer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_ctimer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_stop
</UL>

<P><STRONG><a name="[11c]"></a>am_hal_debug_error</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, am_hal_debug.o(i.am_hal_debug_error))
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_register
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_debug_error
</UL>

<P><STRONG><a name="[118]"></a>am_hal_flash_delay</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, am_hal_flash.o(i.am_hal_flash_delay))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_blocking_fullduplex
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_control
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_iom_reset_on_error
</UL>

<P><STRONG><a name="[12c]"></a>am_hal_flash_delay_status_check</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, am_hal_flash.o(i.am_hal_flash_delay_status_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_flash_delay_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_blocking_fullduplex
</UL>

<P><STRONG><a name="[1ef]"></a>am_hal_flash_page_erase</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, am_hal_flash.o(i.am_hal_flash_page_erase))
<BR><BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_page
</UL>

<P><STRONG><a name="[1f1]"></a>am_hal_flash_program_main</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, am_hal_flash.o(i.am_hal_flash_program_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_flash_program_main
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buffer
</UL>

<P><STRONG><a name="[113]"></a>am_hal_gpio_interrupt_clear</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_gpio_interrupt_clear
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_clear_pending_irq
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[120]"></a>am_hal_gpio_interrupt_enable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = am_hal_gpio_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
</UL>

<P><STRONG><a name="[112]"></a>am_hal_gpio_interrupt_status_get</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, am_hal_gpio.o(i.am_hal_gpio_interrupt_status_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_gpio_interrupt_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_clear_pending_irq
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
</UL>

<P><STRONG><a name="[121]"></a>am_hal_gpio_pinconfig</STRONG> (Thumb, 586 bytes, Stack size 80 bytes, am_hal_gpio.o(i.am_hal_gpio_pinconfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f4]"></a>am_hal_gpio_state_read</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, am_hal_gpio.o(i.am_hal_gpio_state_read))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_get_value
</UL>

<P><STRONG><a name="[122]"></a>am_hal_gpio_state_write</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, am_hal_gpio.o(i.am_hal_gpio_state_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
</UL>

<P><STRONG><a name="[20d]"></a>am_hal_iom_configure</STRONG> (Thumb, 630 bytes, Stack size 36 bytes, am_hal_iom.o(i.am_hal_iom_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am_hal_iom_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
</UL>

<P><STRONG><a name="[123]"></a>am_hal_iom_enable</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, am_hal_iom.o(i.am_hal_iom_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_iom_enable &rArr; am_hal_cmdq_init
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_init
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
</UL>

<P><STRONG><a name="[20c]"></a>am_hal_iom_initialize</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, am_hal_iom.o(i.am_hal_iom_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_iom_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
</UL>

<P><STRONG><a name="[125]"></a>am_hal_iom_power_ctrl</STRONG> (Thumb, 768 bytes, Stack size 16 bytes, am_hal_iom.o(i.am_hal_iom_power_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = am_hal_iom_power_ctrl &rArr; am_hal_pwrctrl_periph_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_enable
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cmdq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
</UL>

<P><STRONG><a name="[12a]"></a>am_hal_iom_spi_blocking_fullduplex</STRONG> (Thumb, 652 bytes, Stack size 64 bytes, am_hal_iom.o(i.am_hal_iom_spi_blocking_fullduplex))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = am_hal_iom_spi_blocking_fullduplex &rArr; am_hal_flash_delay_status_check
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate_transaction
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_iom_reset_on_error
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay_status_check
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_in_out
</UL>

<P><STRONG><a name="[13c]"></a>am_hal_mcuctrl_info_get</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, am_hal_mcuctrl.o(i.am_hal_mcuctrl_info_get))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
</UL>

<P><STRONG><a name="[127]"></a>am_hal_pwrctrl_periph_disable</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_periph_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_pwrctrl_periph_disable
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
</UL>

<P><STRONG><a name="[128]"></a>am_hal_pwrctrl_periph_enable</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, am_hal_pwrctrl.o(i.am_hal_pwrctrl_periph_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_pwrctrl_periph_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
</UL>

<P><STRONG><a name="[131]"></a>am_hal_queue_init</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, am_hal_queue.o(i.am_hal_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
</UL>

<P><STRONG><a name="[12e]"></a>am_hal_queue_item_add</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, am_hal_queue.o(i.am_hal_queue_item_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_queue_item_add
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
</UL>

<P><STRONG><a name="[12f]"></a>am_hal_queue_item_get</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, am_hal_queue.o(i.am_hal_queue_item_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
</UL>

<P><STRONG><a name="[130]"></a>am_hal_uart_configure</STRONG> (Thumb, 588 bytes, Stack size 32 bytes, am_hal_uart.o(i.am_hal_uart_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_hal_uart_configure
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fc]"></a>am_hal_uart_control</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_control))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2fa]"></a>am_hal_uart_initialize</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, am_hal_uart.o(i.am_hal_uart_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = am_hal_uart_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>am_hal_uart_interrupt_clear</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_interrupt_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[132]"></a>am_hal_uart_interrupt_service</STRONG> (Thumb, 356 bytes, Stack size 80 bytes, am_hal_uart.o(i.am_hal_uart_interrupt_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = am_hal_uart_interrupt_service &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[137]"></a>am_hal_uart_interrupt_status_get</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, am_hal_uart.o(i.am_hal_uart_interrupt_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_uart_isr
</UL>

<P><STRONG><a name="[133]"></a>am_hal_uart_power_control</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, am_hal_uart.o(i.am_hal_uart_power_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = am_hal_uart_power_control &rArr; am_hal_pwrctrl_periph_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_enable
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_pwrctrl_periph_disable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>am_hal_uart_transfer</STRONG> (Thumb, 844 bytes, Stack size 160 bytes, am_hal_uart.o(i.am_hal_uart_transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_nonblocking
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_nonblocking
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
</UL>

<P><STRONG><a name="[1c]"></a>am_uart_isr</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.am_uart_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = am_uart_isr &rArr; am_hal_uart_interrupt_service &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_status_get
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_service
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_interrupt_clear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_keil.o(RESET)
</UL>
<P><STRONG><a name="[139]"></a>am_util_delay_us</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, am_util_delay.o(i.am_util_delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_wait_us
</UL>

<P><STRONG><a name="[cd]"></a>am_util_faultisr_collect_data</STRONG> (Thumb, 470 bytes, Stack size 72 bytes, am_util_faultisr.o(i.am_util_faultisr_collect_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = am_util_faultisr_collect_data &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_mcuctrl_info_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStackedReg
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[13d]"></a>am_util_stdio_printf</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, am_util_stdio.o(i.am_util_stdio_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_page
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_in_out
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_terminal_clear
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_faultisr_collect_data
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event
</UL>

<P><STRONG><a name="[2fd]"></a>am_util_stdio_printf_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, am_util_stdio.o(i.am_util_stdio_printf_init))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>am_util_stdio_terminal_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, am_util_stdio.o(i.am_util_stdio_terminal_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = am_util_stdio_terminal_clear &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>am_util_stdio_vsprintf</STRONG> (Thumb, 932 bytes, Stack size 96 bytes, am_util_stdio.o(i.am_util_stdio_vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_hexstr
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_strlen
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;padbuffer
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_hex
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decstr_to_int
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>

<P><STRONG><a name="[49]"></a>callback_rp_user_radio_access_0</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, smtc_modem.o(i.callback_rp_user_radio_access_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = callback_rp_user_radio_access_0 &rArr; rp_get_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rp_to_user_radio_access_rp_status
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_modem.o(i.smtc_modem_init)
</UL>
<P><STRONG><a name="[4a]"></a>callback_rp_user_radio_access_1</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, smtc_modem.o(i.callback_rp_user_radio_access_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = callback_rp_user_radio_access_1 &rArr; rp_get_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rp_to_user_radio_access_rp_status
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_modem.o(i.smtc_modem_init)
</UL>
<P><STRONG><a name="[4b]"></a>callback_rp_user_radio_access_2</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, smtc_modem.o(i.callback_rp_user_radio_access_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = callback_rp_user_radio_access_2 &rArr; rp_get_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rp_to_user_radio_access_rp_status
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_modem.o(i.smtc_modem_init)
</UL>
<P><STRONG><a name="[304]"></a>compute_crc_fw</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, modem_utilities.o(i.compute_crc_fw))
<BR><BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_init
</UL>

<P><STRONG><a name="[168]"></a>convert_rp_to_user_radio_access_rp_status</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, smtc_modem.o(i.convert_rp_to_user_radio_access_rp_status))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_0
</UL>

<P><STRONG><a name="[3bf]"></a>convert_rp_to_user_radio_access_status</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, smtc_modem.o(i.convert_rp_to_user_radio_access_status))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
</UL>

<P><STRONG><a name="[302]"></a>crc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, modem_utilities.o(i.crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_load_context
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_factory_reset
</UL>

<P><STRONG><a name="[3c0]"></a>decrement_asynchronous_msgnumber</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modem_context.o(i.decrement_asynchronous_msgnumber))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
</UL>

<P><STRONG><a name="[31e]"></a>decrement_dm_retrieve_pending_dl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modem_context.o(i.decrement_dm_retrieve_pending_dl))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[1aa]"></a>dm_check_dminfo_size</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, modem_context.o(i.dm_check_dminfo_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = dm_check_dminfo_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
</UL>

<P><STRONG><a name="[1ab]"></a>dm_downlink</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, dm_downlink.o(i.dm_downlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = dm_downlink &rArr; dm_parse_cmd &rArr; dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_retrieve_pending_dl
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_retrieve_dl
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
</UL>

<P><STRONG><a name="[212]"></a>dm_get_number_of_days_mute</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.dm_get_number_of_days_mute))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_modem_connected
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[1ac]"></a>dm_parse_cmd</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, dm_downlink.o(i.dm_parse_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080 + Unknown Stack Size
<LI>Call Chain = dm_parse_cmd &rArr; dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_devnonce_get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_info
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_modem_mute
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status_now
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_muted
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_number_of_days_mute
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_reset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_check_cmd_size
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_downlink
</UL>

<P><STRONG><a name="[1b0]"></a>dm_set_conf</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, modem_context.o(i.dm_set_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1056 + Unknown Stack Size
<LI>Call Chain = dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_region
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_dm_interval
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_check_dminfo_size
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_strategy_set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_joineui
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_leave_network
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
</UL>

<P><STRONG><a name="[1b4]"></a>dm_set_number_of_days_mute</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, modem_context.o(i.dm_set_number_of_days_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = dm_set_number_of_days_mute &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_modem_mute
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[1c2]"></a>dm_status_payload</STRONG> (Thumb, 550 bytes, Stack size 312 bytes, modem_context.o(i.dm_status_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = dm_status_payload &rArr; check_dm_status_max_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_voltage
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_user_define_charge_ma_h
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_uptime_s
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_temp
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_status
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_region
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_gnss_status
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_downlink_frame
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_charge_ma_h
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_appstatus
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_adr_profile
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_charge_counter_to_send
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dm_status_max_size
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_nb_reset_get
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_last_snr_get
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_last_rssi_get
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_joineui
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_deveui
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_devnonce_get
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1_r
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[47]"></a>empty_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smtc_modem.o(i.empty_callback))
<BR>[Address Reference Count : 1]<UL><LI> smtc_modem.o(i.smtc_modem_init)
</UL>
<P><STRONG><a name="[2fb]"></a>error_handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(i.error_handler))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d9]"></a>fifo_ctrl_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, fifo_ctrl.o(i.fifo_ctrl_clear))
<BR><BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_init
</UL>

<P><STRONG><a name="[1d5]"></a>fifo_ctrl_get</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, fifo_ctrl.o(i.fifo_ctrl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = fifo_ctrl_get &rArr; ctrl_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_enable_modem_irq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_disable_modem_irq
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
</UL>

<P><STRONG><a name="[3ce]"></a>fifo_ctrl_get_nb_elt</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fifo_ctrl.o(i.fifo_ctrl_get_nb_elt))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_run_engine
</UL>

<P><STRONG><a name="[1d8]"></a>fifo_ctrl_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, fifo_ctrl.o(i.fifo_ctrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fifo_ctrl_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
</UL>

<P><STRONG><a name="[1da]"></a>fifo_ctrl_print_stat</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, fifo_ctrl.o(i.fifo_ctrl_print_stat))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = fifo_ctrl_print_stat &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_downlink_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_downlink_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_beacon_callback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_a_downlink_callback
</UL>

<P><STRONG><a name="[1db]"></a>fifo_ctrl_set</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, fifo_ctrl.o(i.fifo_ctrl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fifo_ctrl_set &rArr; ctrl_set &rArr; ctrl_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_enable_modem_irq
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_disable_modem_irq
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_set
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_downlink_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_downlink_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_beacon_callback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_a_downlink_callback
</UL>

<P><STRONG><a name="[312]"></a>get_asynchronous_msgnumber</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.get_asynchronous_msgnumber))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[1c4]"></a>get_charge_counter_to_send</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.get_charge_counter_to_send))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[18b]"></a>get_dm_retrieve_pending_dl</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem_context.o(i.get_dm_retrieve_pending_dl))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_class_b_to_generate_event
</UL>

<P><STRONG><a name="[1e3]"></a>get_join_state</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, modem_context.o(i.get_join_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_join_state &rArr; lorawan_api_isjoined
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_status_joining
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_isjoined
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_region
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_nwkkey
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_joineui
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_deveui
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_ping_slot_info_req
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_link_check_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_device_time_req
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_status
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_retrieve_dl
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_modem_connected
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
</UL>

<P><STRONG><a name="[3bd]"></a>get_last_msg_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modem_context.o(i.get_last_msg_event))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
</UL>

<P><STRONG><a name="[14b]"></a>get_modem_adr_profile</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_adr_profile))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
</UL>

<P><STRONG><a name="[1d2]"></a>get_modem_appstatus</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_appstatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_modem_appstatus
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1c5]"></a>get_modem_charge_ma_h</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, modem_context.o(i.get_modem_charge_ma_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_modem_charge_ma_h &rArr; get_modem_charge_ma_s
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_charge_ma_s
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1e6]"></a>get_modem_charge_ma_s</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, modem_context.o(i.get_modem_charge_ma_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_modem_charge_ma_s
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_get_modem_rp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_charge_ma_h
</UL>

<P><STRONG><a name="[1cf]"></a>get_modem_dm_interval</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_dm_interval))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1be]"></a>get_modem_dm_interval_second</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, modem_context.o(i.get_modem_dm_interval_second))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = get_modem_dm_interval_second &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_dm_set_info_interval
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[31c]"></a>get_modem_dm_port</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_dm_port))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[1cc]"></a>get_modem_downlink_frame</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_downlink_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_modem_downlink_frame
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
</UL>

<P><STRONG><a name="[1e8]"></a>get_modem_event_count</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_event_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = get_modem_event_count &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
</UL>

<P><STRONG><a name="[1e9]"></a>get_modem_event_status</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_event_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = get_modem_event_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
</UL>

<P><STRONG><a name="[1d3]"></a>get_modem_gnss_status</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_gnss_status))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1b5]"></a>get_modem_muted</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_muted))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_modem_connected
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[1d0]"></a>get_modem_region</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_modem_region &rArr; lorawan_api_get_region
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[30e]"></a>get_modem_reset_requested</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_reset_requested))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[1c3]"></a>get_modem_status</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_modem_status &rArr; get_join_state &rArr; lorawan_api_isjoined
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_modem_joined
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1e4]"></a>get_modem_status_joining</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_status_joining))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
</UL>

<P><STRONG><a name="[213]"></a>get_modem_suspend</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_suspend))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_modem_connected
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[1c8]"></a>get_modem_temp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_modem_temp
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1cb]"></a>get_modem_uptime_s</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_uptime_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_modem_uptime_s &rArr; smtc_modem_hal_get_time_in_s
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1c6]"></a>get_modem_user_define_charge_ma_h</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.get_modem_user_define_charge_ma_h))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1c7]"></a>get_modem_voltage</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modem_context.o(i.get_modem_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_modem_voltage
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1ee]"></a>hal_flash_erase_page</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, smtc_hal_flash.o(i.hal_flash_erase_page))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = hal_flash_erase_page &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_page_erase
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
</UL>

<P><STRONG><a name="[3c2]"></a>hal_flash_read_buffer</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, smtc_hal_flash.o(i.hal_flash_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hal_flash_read_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
</UL>

<P><STRONG><a name="[1f0]"></a>hal_flash_write_buffer</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, smtc_hal_flash.o(i.hal_flash_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_program_main
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
</UL>

<P><STRONG><a name="[1f2]"></a>hal_gpio_clear_pending_irq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, smtc_hal_gpio.o(i.hal_gpio_clear_pending_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpio_clear_pending_irq &rArr; am_hal_gpio_interrupt_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_status_get
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_radio_irq_clear_pending
</UL>

<P><STRONG><a name="[1f3]"></a>hal_gpio_get_value</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, smtc_hal_gpio.o(i.hal_gpio_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_get_value
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_wait_on_busy
</UL>

<P><STRONG><a name="[1f5]"></a>hal_gpio_init_in</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, smtc_hal_gpio.o(i.hal_gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = hal_gpio_init_in &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_enable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_interrupt_clear
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_irq_attach
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_init
</UL>

<P><STRONG><a name="[111]"></a>hal_gpio_init_out</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, smtc_hal_gpio.o(i.hal_gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_callback
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_gpio_isr
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rak3183_led
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_wait_on_busy
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
</UL>

<P><STRONG><a name="[1f9]"></a>hal_gpio_irq_attach</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smtc_hal_gpio.o(i.hal_gpio_irq_attach))
<BR><BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_irq_config_radio_irq
</UL>

<P><STRONG><a name="[3c4]"></a>hal_gpio_irq_disable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, smtc_hal_gpio.o(i.hal_gpio_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_disable_modem_irq
</UL>

<P><STRONG><a name="[1fa]"></a>hal_gpio_irq_enable</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smtc_hal_gpio.o(i.hal_gpio_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_gpio_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_enable_modem_irq
</UL>

<P><STRONG><a name="[1fb]"></a>hal_gpio_set_value</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, smtc_hal_gpio.o(i.hal_gpio_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_gpio_set_value &rArr; am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_state_write
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_reset
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_check_device_ready
</UL>

<P><STRONG><a name="[1fc]"></a>hal_lp_timer_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, smtc_hal_lp_timer.o(i.hal_lp_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_lp_timer_init &rArr; am_hal_ctimer_config_single
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_config_single
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
</UL>

<P><STRONG><a name="[3c5]"></a>hal_lp_timer_irq_disable</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smtc_hal_lp_timer.o(i.hal_lp_timer_irq_disable))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_disable_modem_irq
</UL>

<P><STRONG><a name="[1fe]"></a>hal_lp_timer_irq_enable</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, smtc_hal_lp_timer.o(i.hal_lp_timer_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_lp_timer_irq_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_enable_modem_irq
</UL>

<P><STRONG><a name="[200]"></a>hal_lp_timer_start</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, smtc_hal_lp_timer.o(i.hal_lp_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = hal_lp_timer_start &rArr; am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_register
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_timer
</UL>

<P><STRONG><a name="[201]"></a>hal_lp_timer_stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, smtc_hal_lp_timer.o(i.hal_lp_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_lp_timer_stop &rArr; am_hal_ctimer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_stop_timer
</UL>

<P><STRONG><a name="[209]"></a>hal_mcu_disable_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smtc_hal_mcu.o(i.hal_mcu_disable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_in_out
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
</UL>

<P><STRONG><a name="[20a]"></a>hal_mcu_enable_irq</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smtc_hal_mcu.o(i.hal_mcu_enable_irq))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_in_out
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
</UL>

<P><STRONG><a name="[202]"></a>hal_mcu_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, smtc_hal_mcu.o(i.hal_mcu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = hal_mcu_init &rArr; hal_gpio_init_in &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
</UL>

<P><STRONG><a name="[3c3]"></a>hal_mcu_reset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, smtc_hal_mcu.o(i.hal_mcu_reset))
<BR><BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
</UL>

<P><STRONG><a name="[203]"></a>hal_mcu_wait_us</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smtc_hal_mcu.o(i.hal_mcu_wait_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = hal_mcu_wait_us &rArr; am_util_delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_reset
</UL>

<P><STRONG><a name="[204]"></a>hal_rng_get_random</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smtc_hal_rng.o(i.hal_rng_get_random))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_rng_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rng_get_random_in_range
</UL>

<P><STRONG><a name="[206]"></a>hal_rng_get_random_in_range</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, smtc_hal_rng.o(i.hal_rng_get_random_in_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hal_rng_get_random_in_range &rArr; hal_rng_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rng_get_random
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
</UL>

<P><STRONG><a name="[3c6]"></a>hal_rtc_get_time_100us</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, smtc_hal_rtc.o(i.hal_rtc_get_time_100us))
<BR><BR>[Called By]<UL><LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_100us
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_radio_irq_timestamp_in_100us
</UL>

<P><STRONG><a name="[3c7]"></a>hal_rtc_get_time_ms</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, smtc_hal_rtc.o(i.hal_rtc_get_time_ms))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
</UL>

<P><STRONG><a name="[3c8]"></a>hal_rtc_get_time_s</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smtc_hal_rtc.o(i.hal_rtc_get_time_s))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
</UL>

<P><STRONG><a name="[207]"></a>hal_rtc_init</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, smtc_hal_rtc.o(i.hal_rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = hal_rtc_init &rArr; am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_start
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_period_set
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_register
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_int_enable
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_ctimer_config_single
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
</UL>

<P><STRONG><a name="[208]"></a>hal_spi_in_out</STRONG> (Thumb, 66 bytes, Stack size 64 bytes, smtc_hal_spi.o(i.hal_spi_in_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_enable_irq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_disable_irq
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_blocking_fullduplex
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>

<P><STRONG><a name="[20b]"></a>hal_spi_init</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, smtc_hal_spi.o(i.hal_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = hal_spi_init &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_power_ctrl
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_initialize
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_enable
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_configure
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
</UL>

<P><STRONG><a name="[20e]"></a>hal_trace_print</STRONG> (Thumb, 30 bytes, Stack size 272 bytes, smtc_hal_trace.o(i.hal_trace_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + Unknown Stack Size
<LI>Call Chain = hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_print
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>

<P><STRONG><a name="[150]"></a>increment_asynchronous_msgnumber</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, modem_context.o(i.increment_asynchronous_msgnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = increment_asynchronous_msgnumber &rArr; get_modem_event_count &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_modem_event_count_and_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_count
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_run_engine
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_update
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_class_b_to_generate_event
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_radio_access_callback
</UL>

<P><STRONG><a name="[20f]"></a>increment_modem_event_count_and_status</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modem_context.o(i.increment_modem_event_count_and_status))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
</UL>

<P><STRONG><a name="[210]"></a>init_rak3183_led</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, main.o(i.init_rak3183_led))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = init_rak3183_led &rArr; hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[223]"></a>lorawan_api_available_link_adr_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_available_link_adr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_available_link_adr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_available_link_adr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_available_new_link_adr_request
</UL>

<P><STRONG><a name="[225]"></a>lorawan_api_beacon_get_metadata</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_beacon_get_metadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lorawan_api_beacon_get_metadata &rArr; smtc_beacon_sniff_get_metadata &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_get_metadata
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_build_beacon_rx_status_ind
</UL>

<P><STRONG><a name="[17f]"></a>lorawan_api_certification</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, lorawan_api.o(i.lorawan_api_certification))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = lorawan_api_certification &rArr; lorawan_certification_parser &rArr; lorawan_api_join_status_clear &rArr; lr1mac_core_join_status_clear &rArr; lr1mac_core_abort &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[186]"></a>lorawan_api_certification_build_beacon_rx_status_ind</STRONG> (Thumb, 44 bytes, Stack size 56 bytes, lorawan_api.o(i.lorawan_api_certification_build_beacon_rx_status_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = lorawan_api_certification_build_beacon_rx_status_ind &rArr; lorawan_certification_build_beacon_rx_status_ind &rArr; lorawan_api_lora_dr_to_sf_bw &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_build_beacon_rx_status_ind
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[16f]"></a>lorawan_api_certification_cw_set_as_stopped</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_certification_cw_set_as_stopped))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_certification_cw_set_as_stopped
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_cw_set_as_stopped
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[185]"></a>lorawan_api_certification_get_beacon_rx_status_ind_ctrl</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_certification_get_beacon_rx_status_ind_ctrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_certification_get_beacon_rx_status_ind_ctrl
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_get_beacon_rx_status_ind_ctrl
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[181]"></a>lorawan_api_certification_get_cw_config</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_certification_get_cw_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lorawan_api_certification_get_cw_config &rArr; lorawan_certification_get_cw_config
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_get_cw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[187]"></a>lorawan_api_certification_get_frame_type</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_certification_get_frame_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_certification_get_frame_type
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_get_frame_type
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[178]"></a>lorawan_api_certification_get_requested_class</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_certification_get_requested_class))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_certification_get_requested_class
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_get_requested_class
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[173]"></a>lorawan_api_certification_get_ul_periodicity</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_certification_get_ul_periodicity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_certification_get_ul_periodicity
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_get_ul_periodicity
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[16e]"></a>lorawan_api_certification_is_cw_running</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_certification_is_cw_running))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_certification_is_cw_running
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_is_cw_running
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[177]"></a>lorawan_api_certification_is_enabled</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_certification_is_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_certification_is_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_get_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[17b]"></a>lorawan_api_class_b_enabled</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_class_b_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_isjoined
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_class_b_enable_service
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[184]"></a>lorawan_api_class_c_enabled</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_class_c_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = lorawan_api_class_c_enabled &rArr; lr1mac_class_c_start &rArr; lr1mac_class_c_launch &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_isjoined
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_start
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[236]"></a>lorawan_api_class_c_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_class_c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = lorawan_api_class_c_start &rArr; lr1mac_class_c_start &rArr; lr1mac_class_c_launch &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_start
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[1b8]"></a>lorawan_api_context_save</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_context_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = lorawan_api_context_save &rArr; lr1mac_core_context_save &rArr; smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_reset
</UL>

<P><STRONG><a name="[1b1]"></a>lorawan_api_devnonce_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_devnonce_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_devnonce_get
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_devnonce_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
</UL>

<P><STRONG><a name="[239]"></a>lorawan_api_dr_custom_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_dr_custom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lorawan_api_dr_custom_set &rArr; lr1mac_core_dr_custom_set &rArr; lr1mac_core_context_save &rArr; smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_custom_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_adr_profile
</UL>

<P><STRONG><a name="[14e]"></a>lorawan_api_dr_strategy_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_dr_strategy_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_dr_strategy_get
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_strategy_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
</UL>

<P><STRONG><a name="[1ba]"></a>lorawan_api_dr_strategy_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_dr_strategy_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lorawan_api_dr_strategy_set &rArr; lr1mac_core_dr_strategy_set &rArr; smtc_real_get_next_dr &rArr; smtc_real_mask_tx_dr_channel_up_dwell_time_check &rArr; SMTC_PUT_BIT16 &rArr; SMTC_SET_BIT16
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_strategy_set
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_adr_profile
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[23d]"></a>lorawan_api_duty_cycle_enable_set</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_duty_cycle_enable_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_duty_cycle_enable_set
</UL>
<BR>[Calls]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_enable_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_update
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_duty_cycle_app_activate
</UL>

<P><STRONG><a name="[214]"></a>lorawan_api_get_activation_mode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_activation_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_get_activation_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_activation_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_modem_connected
</UL>

<P><STRONG><a name="[18a]"></a>lorawan_api_get_class_b_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_class_b_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_get_class_b_status
</UL>
<BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_class_b_status
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_class_b_to_generate_event
</UL>

<P><STRONG><a name="[14d]"></a>lorawan_api_get_current_no_rx_packet_in_mobile_mode_cnt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_current_no_rx_packet_in_mobile_mode_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_get_current_no_rx_packet_in_mobile_mode_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_current_no_rx_packet_in_mobile_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
</UL>

<P><STRONG><a name="[1d1]"></a>lorawan_api_get_deveui</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_get_deveui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorawan_api_get_deveui
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_get_deveui
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[243]"></a>lorawan_api_get_device_time_req_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_device_time_req_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_get_device_time_req_status
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_mac_core_get_device_time_req_status
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[3be]"></a>lorawan_api_get_fifo_obj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lorawan_api.o(i.lorawan_api_get_fifo_obj))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_run_engine
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
</UL>

<P><STRONG><a name="[245]"></a>lorawan_api_get_frequency_factor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_frequency_factor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_get_frequency_factor
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_frequency_factor
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_build_beacon_rx_status_ind
</UL>

<P><STRONG><a name="[1ce]"></a>lorawan_api_get_joineui</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_get_joineui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorawan_api_get_joineui
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_get_joineui
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[248]"></a>lorawan_api_get_link_check_ans</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_get_link_check_ans))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lorawan_api_get_link_check_ans &rArr; lr1_mac_core_get_link_check_ans
</UL>
<BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_mac_core_get_link_check_ans
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[179]"></a>lorawan_api_get_ping_slot_info_req_status</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_ping_slot_info_req_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_get_ping_slot_info_req_status
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_mac_core_get_ping_slot_info_req_status
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[1ea]"></a>lorawan_api_get_region</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_get_region
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_region
</UL>

<P><STRONG><a name="[24c]"></a>lorawan_api_get_regional_parameters_version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_regional_parameters_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorawan_api_get_regional_parameters_version &rArr; smtc_real_get_regional_parameters_version
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_regional_parameters_version
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_regional_params_version
</UL>

<P><STRONG><a name="[24e]"></a>lorawan_api_get_spec_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_get_spec_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorawan_api_get_spec_version &rArr; lr1mac_core_get_lorawan_version
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_lorawan_version
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_lorawan_version
</UL>

<P><STRONG><a name="[250]"></a>lorawan_api_init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, lorawan_api.o(i.lorawan_api_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 816 + Unknown Stack Size
<LI>Call Chain = lorawan_api_init &rArr; lr1mac_core_init &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_init
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[17a]"></a>lorawan_api_is_time_valid</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_is_time_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lorawan_api_is_time_valid &rArr; lr1mac_core_is_time_valid &rArr; smtc_modem_hal_get_time_in_s
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_is_time_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[1e5]"></a>lorawan_api_isjoined</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_isjoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_isjoined
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_mac_joined_status_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_enabled
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_enabled
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[258]"></a>lorawan_api_join</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = lorawan_api_join &rArr; lr1mac_core_join &rArr; smtc_real_get_join_next_channel &rArr; region_ww2g4_get_join_next_channel &rArr; region_ww2g4_get_next_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[25a]"></a>lorawan_api_join_status_clear</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_join_status_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = lorawan_api_join_status_clear &rArr; lr1mac_core_join_status_clear &rArr; lr1mac_core_abort &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join_status_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[1c9]"></a>lorawan_api_last_rssi_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_last_rssi_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_last_rssi_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_last_rssi_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[1ca]"></a>lorawan_api_last_snr_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_last_snr_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_last_snr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_last_snr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[25e]"></a>lorawan_api_lora_dr_to_sf_bw</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_lora_dr_to_sf_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = lorawan_api_lora_dr_to_sf_bw &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_build_beacon_rx_status_ind
</UL>

<P><STRONG><a name="[25f]"></a>lorawan_api_mask_tx_dr_channel_up_dwell_time_check</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_mask_tx_dr_channel_up_dwell_time_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lorawan_api_mask_tx_dr_channel_up_dwell_time_check &rArr; smtc_real_mask_tx_dr_channel_up_dwell_time_check &rArr; SMTC_PUT_BIT16 &rArr; SMTC_SET_BIT16
</UL>
<BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_mask_tx_dr_channel_up_dwell_time_check
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_adr_profile
</UL>

<P><STRONG><a name="[261]"></a>lorawan_api_modem_certification_is_enabled</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_modem_certification_is_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_modem_certification_is_enabled
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_certification_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[263]"></a>lorawan_api_modem_certification_set</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_modem_certification_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lorawan_api_modem_certification_set &rArr; lr1mac_core_certification_set &rArr; lr1mac_core_context_save &rArr; smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_certification_set
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_set_enabled
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_status_push_network_downlink_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_certification_mode
</UL>

<P><STRONG><a name="[1b7]"></a>lorawan_api_nb_reset_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_nb_reset_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_nb_reset_get
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_nb_reset_get
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_reset
</UL>

<P><STRONG><a name="[267]"></a>lorawan_api_next_free_duty_cycle_ms_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_next_free_duty_cycle_ms_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = lorawan_api_next_free_duty_cycle_ms_get &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[269]"></a>lorawan_api_next_join_time_second_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_next_join_time_second_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_next_join_time_second_get
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_join_time_second_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
</UL>

<P><STRONG><a name="[26b]"></a>lorawan_api_next_max_payload_length_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_next_max_payload_length_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = lorawan_api_next_max_payload_length_get &rArr; lr1mac_core_next_max_payload_length_get &rArr; smtc_real_get_max_payload_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_max_payload_length_get
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[26d]"></a>lorawan_api_payload_send</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lorawan_api.o(i.lorawan_api_payload_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 904 + Unknown Stack Size
<LI>Call Chain = lorawan_api_payload_send &rArr; lr1mac_core_payload_send &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[26f]"></a>lorawan_api_process</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1112 + Unknown Stack Size
<LI>Call Chain = lorawan_api_process &rArr; lr1mac_core_process &rArr; lr1_stack_mac_rx_timer_configure &rArr; lr1_stack_mac_rx_radio_start &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[271]"></a>lorawan_api_reset_no_rx_packet_in_mobile_mode_cnt</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_reset_no_rx_packet_in_mobile_mode_cnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_reset_no_rx_packet_in_mobile_mode_cnt
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_reset_no_rx_packet_in_mobile_mode_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_adr_set_profile
</UL>

<P><STRONG><a name="[273]"></a>lorawan_api_rp_hook_id_get</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_rp_hook_id_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = lorawan_api_rp_hook_id_get &rArr; rp_hook_get_id &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_rp_get
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
</UL>

<P><STRONG><a name="[275]"></a>lorawan_api_rx_ack_bit_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_rx_ack_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_rx_ack_bit_get
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_rx_ack_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_update
</UL>

<P><STRONG><a name="[277]"></a>lorawan_api_send_stack_cid_req</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_send_stack_cid_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152 + Unknown Stack Size
<LI>Call Chain = lorawan_api_send_stack_cid_req &rArr; lr1mac_core_send_stack_cid_req &rArr; lr1mac_core_payload_send &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_send_stack_cid_req
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[279]"></a>lorawan_api_set_activation_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_set_activation_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_set_activation_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_activation_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[27b]"></a>lorawan_api_set_appkey</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_set_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = lorawan_api_set_appkey &rArr; smtc_modem_crypto_set_key &rArr; derive_multicast_root_key &rArr; smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_set_key
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_set_appkey
</UL>

<P><STRONG><a name="[27d]"></a>lorawan_api_set_deveui</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_set_deveui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorawan_api_set_deveui
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_set_deveui
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_deveui
</UL>

<P><STRONG><a name="[1bc]"></a>lorawan_api_set_joineui</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_set_joineui))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lorawan_api_set_joineui
</UL>
<BR>[Calls]<UL><LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_set_joineui
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_joineui
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
</UL>

<P><STRONG><a name="[280]"></a>lorawan_api_set_ping_slot_periodicity</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_set_ping_slot_periodicity))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_set_ping_slot_periodicity
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_ping_slot_periodicity
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[282]"></a>lorawan_api_set_region</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = lorawan_api_set_region &rArr; lr1mac_core_set_region &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_region
</UL>

<P><STRONG><a name="[176]"></a>lorawan_api_set_status_push_network_downlink_to_user</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_set_status_push_network_downlink_to_user))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_set_status_push_network_downlink_to_user
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_status_push_network_downlink_to_user
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_set
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[3d5]"></a>lorawan_api_stack_mac_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lorawan_api.o(i.lorawan_api_stack_mac_get))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
</UL>

<P><STRONG><a name="[171]"></a>lorawan_api_state_get</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lorawan_api.o(i.lorawan_api_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_api_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_scheduler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[228]"></a>lorawan_certification_build_beacon_rx_status_ind</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, lorawan_certification.o(i.lorawan_certification_build_beacon_rx_status_ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = lorawan_certification_build_beacon_rx_status_ind &rArr; lorawan_api_lora_dr_to_sf_bw &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_lora_dr_to_sf_bw
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_frequency_factor
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_beacon_get_metadata
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_param
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_gw_specific
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_epoch_time
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_build_beacon_rx_status_ind
</UL>

<P><STRONG><a name="[229]"></a>lorawan_certification_cw_set_as_stopped</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_certification.o(i.lorawan_certification_cw_set_as_stopped))
<BR><BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_cw_set_as_stopped
</UL>

<P><STRONG><a name="[22a]"></a>lorawan_certification_get_beacon_rx_status_ind_ctrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_certification.o(i.lorawan_certification_get_beacon_rx_status_ind_ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_beacon_rx_status_ind_ctrl
</UL>

<P><STRONG><a name="[22b]"></a>lorawan_certification_get_cw_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lorawan_certification.o(i.lorawan_certification_get_cw_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lorawan_certification_get_cw_config
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_cw_config
</UL>

<P><STRONG><a name="[230]"></a>lorawan_certification_get_enabled</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_certification.o(i.lorawan_certification_get_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_is_enabled
</UL>

<P><STRONG><a name="[22c]"></a>lorawan_certification_get_frame_type</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_certification.o(i.lorawan_certification_get_frame_type))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_frame_type
</UL>

<P><STRONG><a name="[22d]"></a>lorawan_certification_get_requested_class</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_certification.o(i.lorawan_certification_get_requested_class))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_requested_class
</UL>

<P><STRONG><a name="[22e]"></a>lorawan_certification_get_ul_periodicity</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_certification.o(i.lorawan_certification_get_ul_periodicity))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_ul_periodicity
</UL>

<P><STRONG><a name="[255]"></a>lorawan_certification_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lorawan_certification.o(i.lorawan_certification_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lorawan_certification_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_set_enabled
</UL>

<P><STRONG><a name="[22f]"></a>lorawan_certification_is_cw_running</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lorawan_certification.o(i.lorawan_certification_is_cw_running))
<BR><BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_is_cw_running
</UL>

<P><STRONG><a name="[227]"></a>lorawan_certification_parser</STRONG> (Thumb, 2242 bytes, Stack size 56 bytes, lorawan_certification.o(i.lorawan_certification_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = lorawan_certification_parser &rArr; lorawan_api_join_status_clear &rArr; lr1mac_core_join_status_clear &rArr; lr1mac_core_abort &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_ping_slot_info_req
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_link_check_req
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_device_time_req
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_next_max_payload_length_get
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_set
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_join_status_clear
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_ping_slot_periodicity
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_activation_mode
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_alarm_start_timer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_adr_set_profile
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_modem_joined
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_duty_cycle_app_activate
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_regional_params_version
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_modem_version
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_lorawan_version
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification
</UL>

<P><STRONG><a name="[265]"></a>lorawan_certification_set_enabled</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lorawan_certification.o(i.lorawan_certification_set_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lorawan_certification_set_enabled &rArr; lorawan_certification_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_init
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_set
</UL>

<P><STRONG><a name="[244]"></a>lr1_mac_core_get_device_time_req_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1_mac_core_get_device_time_req_status))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_device_time_req_status
</UL>

<P><STRONG><a name="[249]"></a>lr1_mac_core_get_link_check_ans</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lr1mac_core.o(i.lr1_mac_core_get_link_check_ans))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lr1_mac_core_get_link_check_ans
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_link_check_ans
</UL>

<P><STRONG><a name="[24a]"></a>lr1_mac_core_get_ping_slot_info_req_status</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1_mac_core_get_ping_slot_info_req_status))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_ping_slot_info_req_status
</UL>

<P><STRONG><a name="[257]"></a>lr1_mac_joined_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1_mac_joined_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_isjoined
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[2d3]"></a>lr1_stack_mac_cmd_ans_cut</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.lr1_stack_mac_cmd_ans_cut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lr1_stack_mac_cmd_ans_cut
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[28e]"></a>lr1_stack_mac_cmd_parse</STRONG> (Thumb, 370 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_cmd_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_cmd_parse &rArr; link_adr_parser &rArr; smtc_real_build_channel_mask &rArr; region_ww2g4_build_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_param_setup_parser
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_timing_setup_parser
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_param_setup_parser
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_info_ans_parser
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_channel_req_parser
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_check_parser
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duty_cycle_parser
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_time_ans_parser
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_parser
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_freq_req_parser
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
</UL>

<P><STRONG><a name="[296]"></a>lr1_stack_mac_init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_init &rArr; lr1_stack_mac_session_init &rArr; smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_session_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[298]"></a>lr1_stack_mac_join_accept</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_join_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_join_accept &rArr; smtc_real_update_cflist &rArr; smtc_real_build_channel_mask &rArr; region_ww2g4_build_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx_dr_valid
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx1_dr_offset_valid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_session
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_after_join_snapshot_channel_mask
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_derive_skeys
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_session_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
</UL>

<P><STRONG><a name="[29f]"></a>lr1_stack_mac_join_request_build</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_join_request_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_join_request_build &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_get_joineui
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_get_deveui
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_compute_join_mic
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_header_set
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
</UL>

<P><STRONG><a name="[4f]"></a>lr1_stack_mac_radio_abort_lbt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_radio_abort_lbt))
<BR>[Address Reference Count : 1]<UL><LI> smtc_real.o(i.smtc_real_config)
</UL>
<P><STRONG><a name="[50]"></a>lr1_stack_mac_radio_busy_lbt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_radio_busy_lbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_radio_busy_lbt &rArr; smtc_real_get_next_channel &rArr; region_ww2g4_get_next_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_real.o(i.smtc_real_config)
</UL>
<P><STRONG><a name="[40]"></a>lr1_stack_mac_rp_callback</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_rp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_rp_callback &rArr; rp_get_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_downlink_check_under_it
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lr1mac_core.o(i.lr1mac_core_init)
</UL>
<P><STRONG><a name="[2a3]"></a>lr1_stack_mac_rx_frame_decode</STRONG> (Thumb, 864 bytes, Stack size 64 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_frame_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 848 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_rx_frame_decode &rArr; smtc_modem_crypto_verify_mic &rArr; smtc_secure_element_verify_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_verify_mic
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_process_join_accept
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_payload_decrypt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_min_size_check
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_mhdr_extract
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_fhdr_extract
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_fcnt_dwn_accept
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_max_size_check
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[3b]"></a>lr1_stack_mac_rx_gfsk_launch_callback_for_rp</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_gfsk_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_rx_gfsk_launch_callback_for_rp &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_stats_set_rx_timestamp
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_setup_gfsk
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_rx
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_dio_irq_params
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_radio_start)
<LI> smtc_ping_slot.o(i.smtc_ping_slot_start)
<LI> lr1mac_class_c.o(i.lr1mac_class_c_launch)
</UL>
<P><STRONG><a name="[3a]"></a>lr1_stack_mac_rx_lora_launch_callback_for_rp</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_lora_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_rx_lora_launch_callback_for_rp &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_stats_set_rx_timestamp
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_setup_lora
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_rx
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_dio_irq_params
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_radio_start)
<LI> lr1mac_class_c.o(i.lr1mac_class_c_launch)
</UL>
<P><STRONG><a name="[2b2]"></a>lr1_stack_mac_rx_radio_start</STRONG> (Thumb, 742 bytes, Stack size 248 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_radio_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_rx_radio_start &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_sync_word
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_preamble_len
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_compute_lora_ldro
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
</UL>

<P><STRONG><a name="[2b8]"></a>lr1_stack_mac_rx_timer_configure</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_rx_timer_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_rx_timer_configure &rArr; lr1_stack_mac_rx_radio_start &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_board_delay_ms
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_radio_tcxo_startup_delay_ms
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx_config
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_window_parameters
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_start_time_offset_ms
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[297]"></a>lr1_stack_mac_session_init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_session_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lr1_stack_mac_session_init &rArr; smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_init
</UL>

<P><STRONG><a name="[2bb]"></a>lr1_stack_mac_tx_frame_build</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_frame_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lr1_stack_mac_tx_frame_build &rArr; frame_header_set
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mac_header_set
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frame_header_set
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[2bd]"></a>lr1_stack_mac_tx_frame_encrypt</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_frame_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_tx_frame_encrypt &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_payload_encrypt
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_compute_and_add_mic
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[3d]"></a>lr1_stack_mac_tx_gfsk_launch_callback_for_rp</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_gfsk_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_tx_gfsk_launch_callback_for_rp &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_stats_set_tx_timestamp
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_setup_gfsk
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_tx
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_pkt_payload
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_dio_irq_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_start)
</UL>
<P><STRONG><a name="[3c]"></a>lr1_stack_mac_tx_lora_launch_callback_for_rp</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_lora_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_tx_lora_launch_callback_for_rp &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_stats_set_tx_timestamp
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_setup_lora
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_tx
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_pkt_payload
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_dio_irq_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_start)
</UL>
<P><STRONG><a name="[3e]"></a>lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp</STRONG> (Thumb, 316 bytes, Stack size 48 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_stats_set_tx_timestamp
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_tx
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_dio_irq_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_start)
</UL>
<P><STRONG><a name="[51]"></a>lr1_stack_mac_tx_radio_free_lbt</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_free_lbt))
<BR><BR>[Stack]<UL><LI>Max Depth = 984 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_tx_radio_free_lbt &rArr; lr1_stack_mac_tx_radio_start &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_real.o(i.smtc_real_config)
</UL>
<P><STRONG><a name="[2c3]"></a>lr1_stack_mac_tx_radio_start</STRONG> (Thumb, 856 bytes, Stack size 240 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_tx_radio_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_tx_radio_start &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_radio_tcxo_startup_delay_ms
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_sync_word
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_preamble_len
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_header_count
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_grid
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_dr_to_cr_bw
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lr_fhss_sync_word
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_clamp_output_power_eirp_vs_freq_and_dr
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_lr_fhss_get_time_on_air_in_ms
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_get_lora_time_on_air_in_ms
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_get_gfsk_time_on_air_in_ms
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_compute_lora_ldro
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_free_lbt
</UL>

<P><STRONG><a name="[2cc]"></a>lr1_stack_mac_update</STRONG> (Thumb, 692 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_update &rArr; lr1_stack_toa_get &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_payload_size_valid
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_dr
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_max_payload_size
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr_simulation
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_ans_cut
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_build
</UL>
<BR>[Called By]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
</UL>

<P><STRONG><a name="[2f6]"></a>lr1_stack_mac_update_tx_done</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_update_tx_done))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[2d4]"></a>lr1_stack_network_next_free_duty_cycle_ms_get</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.lr1_stack_network_next_free_duty_cycle_ms_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lr1_stack_network_next_free_duty_cycle_ms_get &rArr; smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
</UL>

<P><STRONG><a name="[2cd]"></a>lr1_stack_toa_get</STRONG> (Thumb, 434 bytes, Stack size 64 bytes, lr1_stack_mac_layer.o(i.lr1_stack_toa_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = lr1_stack_toa_get &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_preamble_len
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_header_count
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_dr_to_cr_bw
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_lr_fhss_get_time_on_air_in_ms
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_get_lora_time_on_air_in_ms
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_get_gfsk_time_on_air_in_ms
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_compute_lora_ldro
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[234]"></a>lr1mac_class_c_enabled</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lr1mac_class_c.o(i.lr1mac_class_c_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_enabled &rArr; lr1mac_class_c_stop &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_enabled
</UL>

<P><STRONG><a name="[252]"></a>lr1mac_class_c_init</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, lr1mac_class_c.o(i.lr1mac_class_c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
</UL>

<P><STRONG><a name="[36]"></a>lr1mac_class_c_mac_rp_callback</STRONG> (Thumb, 436 bytes, Stack size 24 bytes, lr1mac_class_c.o(i.lr1mac_class_c_mac_rp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_mac_rp_callback &rArr; lr1mac_class_c_mac_rx_frame_decode &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_downlink_check_under_it
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_api.o(i.lorawan_api_init)
</UL>
<P><STRONG><a name="[235]"></a>lr1mac_class_c_start</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lr1mac_class_c.o(i.lr1mac_class_c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_start &rArr; lr1mac_class_c_launch &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_start
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_enabled
</UL>

<P><STRONG><a name="[2d5]"></a>lr1mac_class_c_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lr1mac_class_c.o(i.lr1mac_class_c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_stop &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_enabled
</UL>

<P><STRONG><a name="[2dd]"></a>lr1mac_core_abort</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lr1mac_core.o(i.lr1mac_core_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_abort &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join_status_clear
</UL>

<P><STRONG><a name="[224]"></a>lr1mac_core_available_link_adr_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_available_link_adr_get))
<BR><BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_available_link_adr_get
</UL>

<P><STRONG><a name="[262]"></a>lr1mac_core_certification_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_certification_get))
<BR><BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_is_enabled
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[264]"></a>lr1mac_core_certification_set</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lr1mac_core.o(i.lr1mac_core_certification_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lr1mac_core_certification_set &rArr; lr1mac_core_context_save &rArr; smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_set
</UL>

<P><STRONG><a name="[2de]"></a>lr1mac_core_context_load</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lr1mac_core.o(i.lr1mac_core_context_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = lr1mac_core_context_load &rArr; smtc_modem_hal_context_restore &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_utilities_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[237]"></a>lr1mac_core_context_save</STRONG> (Thumb, 106 bytes, Stack size 64 bytes, lr1mac_core.o(i.lr1mac_core_context_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lr1mac_core_context_save &rArr; smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_utilities_crc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_context_save
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_region
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_custom_set
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_certification_set
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_recover_nvm
</UL>

<P><STRONG><a name="[217]"></a>lr1mac_core_convert_rtc_to_gps_epoch_time</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, lr1mac_core.o(i.lr1mac_core_convert_rtc_to_gps_epoch_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lr1mac_core_convert_rtc_to_gps_epoch_time &rArr; lr1mac_core_is_time_valid &rArr; smtc_modem_hal_get_time_in_s
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_is_time_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_beacon
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[238]"></a>lr1mac_core_devnonce_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_devnonce_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_devnonce_get
</UL>

<P><STRONG><a name="[23a]"></a>lr1mac_core_dr_custom_set</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lr1mac_core.o(i.lr1mac_core_dr_custom_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lr1mac_core_dr_custom_set &rArr; lr1mac_core_context_save &rArr; smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
</UL>
<BR>[Called By]<UL><LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_custom_set
</UL>

<P><STRONG><a name="[23b]"></a>lr1mac_core_dr_strategy_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_dr_strategy_get))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_strategy_get
</UL>

<P><STRONG><a name="[23c]"></a>lr1mac_core_dr_strategy_set</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lr1mac_core.o(i.lr1mac_core_dr_strategy_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lr1mac_core_dr_strategy_set &rArr; smtc_real_get_next_dr &rArr; smtc_real_mask_tx_dr_channel_up_dwell_time_check &rArr; SMTC_PUT_BIT16 &rArr; SMTC_SET_BIT16
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_min_tx_channel_dr
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_dr_distribution
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_default_max_eirp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_strategy_set
</UL>

<P><STRONG><a name="[23f]"></a>lr1mac_core_get_activation_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_get_activation_mode))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_activation_mode
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
</UL>

<P><STRONG><a name="[240]"></a>lr1mac_core_get_class_b_status</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_get_class_b_status))
<BR><BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_class_b_status
</UL>

<P><STRONG><a name="[241]"></a>lr1mac_core_get_current_no_rx_packet_in_mobile_mode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_get_current_no_rx_packet_in_mobile_mode))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_current_no_rx_packet_in_mobile_mode_cnt
</UL>

<P><STRONG><a name="[24f]"></a>lr1mac_core_get_lorawan_version</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lr1mac_core.o(i.lr1mac_core_get_lorawan_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lr1mac_core_get_lorawan_version
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_spec_version
</UL>

<P><STRONG><a name="[24b]"></a>lr1mac_core_get_region</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_get_region))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_region
</UL>

<P><STRONG><a name="[3ac]"></a>lr1mac_core_get_status_push_network_downlink_to_user</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_get_status_push_network_downlink_to_user))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[251]"></a>lr1mac_core_init</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, lr1mac_core.o(i.lr1mac_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_init &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_load
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_supported_region
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_adr_ack_limit
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_adr_ack_delay
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_recover_nvm
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_devnonce_reset
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
</UL>

<P><STRONG><a name="[256]"></a>lr1mac_core_is_time_valid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lr1mac_core.o(i.lr1mac_core_is_time_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lr1mac_core_is_time_valid &rArr; smtc_modem_hal_get_time_in_s
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_is_time_valid
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_convert_rtc_to_gps_epoch_time
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[259]"></a>lr1mac_core_join</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lr1mac_core.o(i.lr1mac_core_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_join &rArr; smtc_real_get_join_next_channel &rArr; region_ww2g4_get_join_next_channel &rArr; region_ww2g4_get_next_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_activation_mode
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_dr_distribution
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx2_join_dr
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx1_join_delay
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_join_next_channel
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_dr
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_join
</UL>

<P><STRONG><a name="[25b]"></a>lr1mac_core_join_status_clear</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lr1mac_core.o(i.lr1mac_core_join_status_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_join_status_clear &rArr; lr1mac_core_abort &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_join_snapshot_channel_mask
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_join_status_clear
</UL>

<P><STRONG><a name="[25c]"></a>lr1mac_core_last_rssi_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_last_rssi_get))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_last_rssi_get
</UL>

<P><STRONG><a name="[25d]"></a>lr1mac_core_last_snr_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_last_snr_get))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_last_snr_get
</UL>

<P><STRONG><a name="[266]"></a>lr1mac_core_nb_reset_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_nb_reset_get))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_nb_reset_get
</UL>

<P><STRONG><a name="[268]"></a>lr1mac_core_next_free_duty_cycle_ms_get</STRONG> (Thumb, 100 bytes, Stack size 96 bytes, lr1mac_core.o(i.lr1mac_core_next_free_duty_cycle_ms_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_dtc_supported
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_current_enabled_frequency_list
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_network_next_free_duty_cycle_ms_get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_next_free_duty_cycle_ms_get
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[26a]"></a>lr1mac_core_next_join_time_second_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_next_join_time_second_get))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_next_join_time_second_get
</UL>

<P><STRONG><a name="[26c]"></a>lr1mac_core_next_max_payload_length_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lr1mac_core.o(i.lr1mac_core_next_max_payload_length_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_next_max_payload_length_get &rArr; smtc_real_get_max_payload_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_max_payload_size
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_next_max_payload_length_get
</UL>

<P><STRONG><a name="[26e]"></a>lr1mac_core_payload_send</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, lr1mac_core.o(i.lr1mac_core_payload_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_payload_send &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_activation_mode
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_user_payload
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_payload_size_valid
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_build
</UL>
<BR>[Called By]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_payload_send
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_send_stack_cid_req
</UL>

<P><STRONG><a name="[270]"></a>lr1mac_core_process</STRONG> (Thumb, 1708 bytes, Stack size 56 bytes, lr1mac_core.o(i.lr1mac_core_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 1104 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_process &rArr; lr1_stack_mac_rx_timer_configure &rArr; lr1_stack_mac_rx_radio_start &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_get_state
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_certification_get
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_mac_joined_status_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_sum
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_devnonce_rst
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_status_get
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failsafe_timstamp_get
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_dr_to_cr_bw
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update_tx_done
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_process
</UL>

<P><STRONG><a name="[272]"></a>lr1mac_core_reset_no_rx_packet_in_mobile_mode_cnt</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_reset_no_rx_packet_in_mobile_mode_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_reset_no_rx_packet_in_mobile_mode_cnt
</UL>

<P><STRONG><a name="[274]"></a>lr1mac_core_rp_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_rp_get))
<BR><BR>[Called By]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_rp_hook_id_get
</UL>

<P><STRONG><a name="[276]"></a>lr1mac_core_rx_ack_bit_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_rx_ack_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_rx_ack_bit_get
</UL>

<P><STRONG><a name="[278]"></a>lr1mac_core_send_stack_cid_req</STRONG> (Thumb, 252 bytes, Stack size 280 bytes, lr1mac_core.o(i.lr1mac_core_send_stack_cid_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 1144 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_send_stack_cid_req &rArr; lr1mac_core_payload_send &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_send_stack_cid_req
</UL>

<P><STRONG><a name="[27a]"></a>lr1mac_core_set_activation_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_set_activation_mode))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_activation_mode
</UL>

<P><STRONG><a name="[281]"></a>lr1mac_core_set_ping_slot_periodicity</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_set_ping_slot_periodicity))
<BR><BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_ping_slot_periodicity
</UL>

<P><STRONG><a name="[283]"></a>lr1mac_core_set_region</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lr1mac_core.o(i.lr1mac_core_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = lr1mac_core_set_region &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_supported_region
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_region
</UL>

<P><STRONG><a name="[284]"></a>lr1mac_core_set_status_push_network_downlink_to_user</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_set_status_push_network_downlink_to_user))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_status_push_network_downlink_to_user
</UL>

<P><STRONG><a name="[285]"></a>lr1mac_core_state_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.lr1mac_core_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_state_get
</UL>

<P><STRONG><a name="[2a9]"></a>lr1mac_fcnt_dwn_accept</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lr1mac_utilities.o(i.lr1mac_fcnt_dwn_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = lr1mac_fcnt_dwn_accept &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[2a8]"></a>lr1mac_rx_fhdr_extract</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, lr1mac_utilities.o(i.lr1mac_rx_fhdr_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = lr1mac_rx_fhdr_extract &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[2a6]"></a>lr1mac_rx_mhdr_extract</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lr1mac_utilities.o(i.lr1mac_rx_mhdr_extract))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = lr1mac_rx_mhdr_extract &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[2a5]"></a>lr1mac_rx_payload_max_size_check</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.lr1mac_rx_payload_max_size_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = lr1mac_rx_payload_max_size_check &rArr; smtc_real_get_max_payload_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_max_payload_size
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[2a4]"></a>lr1mac_rx_payload_min_size_check</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lr1mac_utilities.o(i.lr1mac_rx_payload_min_size_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = lr1mac_rx_payload_min_size_check &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[222]"></a>lr1mac_utilities_crc</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, lr1mac_utilities.o(i.lr1mac_utilities_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lr1mac_utilities_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_load
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_recover_nvm
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_devnonce_rst
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_devnonce_reset
</UL>

<P><STRONG><a name="[c7]"></a>main</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 2536 + Unknown Stack Size
<LI>Call Chain = main &rArr; smtc_modem_run_engine &rArr; modem_supervisor_engine &rArr; certification_event_handler &rArr; smtc_modem_set_certification_mode &rArr; smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_run_engine
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_terminal_clear
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_power_control
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_initialize
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_control
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_configure
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_enable
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_clkgen_control
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_enable
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_cachectrl_config
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_rak3183_led
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[199]"></a>memcpy1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lr1mac_utilities.o(i.memcpy1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_set_channel_mask
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_build_channel_mask
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_send_stack_cid_req
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_user_payload
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_dr
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_fhdr_extract
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[1bb]"></a>memcpy1_r</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, lr1mac_utilities.o(i.memcpy1_r))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcpy1_r
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
</UL>

<P><STRONG><a name="[377]"></a>memset1</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lr1mac_utilities.o(i.memset1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_init
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_config
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_build_channel_mask
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_channel_mask
</UL>

<P><STRONG><a name="[151]"></a>modem_available_new_link_adr_request</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, modem_context.o(i.modem_available_new_link_adr_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = modem_available_new_link_adr_request &rArr; lorawan_api_available_link_adr_get
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_available_link_adr_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
</UL>

<P><STRONG><a name="[91]"></a>modem_context_empty_callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, modem_context.o(i.modem_context_empty_callback))
<BR>[Address Reference Count : 1]<UL><LI> modem_context.o(.constdata)
</UL>
<P><STRONG><a name="[301]"></a>modem_context_factory_reset</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, modem_context.o(i.modem_context_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = modem_context_factory_reset &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_load_context
</UL>

<P><STRONG><a name="[1e7]"></a>modem_context_get_modem_rp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_context_get_modem_rp))
<BR><BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_charge_ma_s
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
</UL>

<P><STRONG><a name="[3c1]"></a>modem_context_get_tx_power_offset_db</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modem_context.o(i.modem_context_get_tx_power_offset_db))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_tx_power_offset_db
</UL>

<P><STRONG><a name="[303]"></a>modem_context_init</STRONG> (Thumb, 204 bytes, Stack size 8 bytes, modem_context.o(i.modem_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = modem_context_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_crc_fw
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[321]"></a>modem_context_reset_dm_tag_number</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, modem_context.o(i.modem_context_reset_dm_tag_number))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[305]"></a>modem_context_set_appkey</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, modem_context.o(i.modem_context_set_appkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = modem_context_set_appkey &rArr; lorawan_api_set_appkey &rArr; smtc_modem_crypto_set_key &rArr; derive_multicast_root_key &rArr; smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_appkey
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_nwkkey
</UL>

<P><STRONG><a name="[3cb]"></a>modem_context_set_modem_radio_ctx</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_context_set_modem_radio_ctx))
<BR><BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
</UL>

<P><STRONG><a name="[316]"></a>modem_context_set_modem_rp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_context_set_modem_rp))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[306]"></a>modem_event_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modem_context.o(i.modem_event_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = modem_event_init
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_event_count_and_status
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[14c]"></a>modem_get_adr_mobile_timeout_config</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_get_adr_mobile_timeout_config))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
</UL>

<P><STRONG><a name="[31a]"></a>modem_get_dm_info_bitfield_periodic</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_get_dm_info_bitfield_periodic))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[322]"></a>modem_get_duty_cycle_disabled_by_host</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_get_duty_cycle_disabled_by_host))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_update
</UL>

<P><STRONG><a name="[324]"></a>modem_get_extended_callback</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, modem_context.o(i.modem_get_extended_callback))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[3b7]"></a>modem_get_test_mode_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_get_test_mode_status))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_tx_power_offset_db
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_region
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_nwkkey
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_joineui
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_deveui
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_dm_set_info_interval
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_alarm_start_timer
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_adr_set_profile
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_leave_network
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_radio_reset
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_nop
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_duty_cycle_app_activate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_certification_mode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_request_uplink
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_regional_params_version
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_modem_version
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_lorawan_version
</UL>

<P><STRONG><a name="[30f]"></a>modem_get_user_alarm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_get_user_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[1b2]"></a>modem_leave</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, modem_context.o(i.modem_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 1016 + Unknown Stack Size
<LI>Call Chain = modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_join_status_clear
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_enabled
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_enabled
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init_task
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_modem_joined
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_joining
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_leave_network
</UL>

<P><STRONG><a name="[30a]"></a>modem_load_context</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, modem_context.o(i.modem_load_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = modem_load_context &rArr; modem_context_factory_reset &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_factory_reset
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[31b]"></a>modem_set_dm_info_bitfield_periodic</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem_context.o(i.modem_set_dm_info_bitfield_periodic))
<BR><BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[3d0]"></a>modem_set_duty_cycle_disabled_by_host</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_set_duty_cycle_disabled_by_host))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_duty_cycle_app_activate
</UL>

<P><STRONG><a name="[3d4]"></a>modem_set_test_mode_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_set_test_mode_status))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
</UL>

<P><STRONG><a name="[310]"></a>modem_set_user_alarm</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, modem_context.o(i.modem_set_user_alarm))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_alarm_start_timer
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[30b]"></a>modem_supervisor_add_task</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, modem_supervisor.o(i.modem_supervisor_add_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_ping_slot_info_req
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_link_check_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_device_time_req
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_crash_log
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_retrieve_dl
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_modem_mute
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status_now
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
</UL>

<P><STRONG><a name="[30c]"></a>modem_supervisor_add_task_crash_log</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_crash_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_crash_log &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_info
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[17c]"></a>modem_supervisor_add_task_device_time_req</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_device_time_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_device_time_req &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[1bf]"></a>modem_supervisor_add_task_dm_status</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_dm_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_dm_status &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_dm_set_info_interval
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[1af]"></a>modem_supervisor_add_task_dm_status_now</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_dm_status_now))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_dm_status_now &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_reset
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[1b3]"></a>modem_supervisor_add_task_join</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_join &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_next_join_time_second_get
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_is_enabled
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_joining
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[28a]"></a>modem_supervisor_add_task_link_check_req</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_link_check_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_link_check_req &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[1b6]"></a>modem_supervisor_add_task_modem_mute</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, modem_context.o(i.modem_supervisor_add_task_modem_mute))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_modem_mute &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[17d]"></a>modem_supervisor_add_task_ping_slot_info_req</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_ping_slot_info_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_ping_slot_info_req &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[18d]"></a>modem_supervisor_add_task_retrieve_dl</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, modem_context.o(i.modem_supervisor_add_task_retrieve_dl))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_add_task_retrieve_dl &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_downlink
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_class_b_to_generate_event
</UL>

<P><STRONG><a name="[30d]"></a>modem_supervisor_engine</STRONG> (Thumb, 312 bytes, Stack size 24 bytes, modem_supervisor.o(i.modem_supervisor_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 2504 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_engine &rArr; certification_event_handler &rArr; smtc_modem_set_certification_mode &rArr; smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_disable_modem_irq
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_set_user_alarm
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_user_alarm
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_suspend
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_reset_requested
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_asynchronous_msgnumber
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_next_free_duty_cycle_ms_get
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_is_enabled
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_muted
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_state_get
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_process
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_scheduler
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_class_b_to_generate_event
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_run_engine
</UL>

<P><STRONG><a name="[314]"></a>modem_supervisor_init</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, modem_supervisor.o(i.modem_supervisor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_init &rArr; lorawan_api_init &rArr; lr1mac_core_init &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_load_context
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_event_init
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_set_modem_rp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_init
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_join_status_clear
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_strategy_set
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_crashlog_status
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init_task
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_reset_after_crash
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_start_time_s
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
</UL>

<P><STRONG><a name="[309]"></a>modem_supervisor_init_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, modem_supervisor.o(i.modem_supervisor_init_task))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[319]"></a>modem_supervisor_launch_task</STRONG> (Thumb, 1690 bytes, Stack size 288 bytes, modem_supervisor.o(i.modem_supervisor_launch_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1440 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_launch_task &rArr; lorawan_api_send_stack_cid_req &rArr; lr1mac_core_send_stack_cid_req &rArr; lr1mac_core_payload_send &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_set_dm_info_bitfield_periodic
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_dm_info_bitfield_periodic
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_port
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dm_retrieve_pending_dl
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_get_number_of_days_mute
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_dm_retrieve_pending_dl
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_payload_send
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_next_max_payload_length_get
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_is_enabled
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_join
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_restore_crashlog
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_muted
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_number_of_days_mute
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_send_stack_cid_req
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_remove_task
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_scheduler
</UL>

<P><STRONG><a name="[31f]"></a>modem_supervisor_remove_task</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, modem_supervisor.o(i.modem_supervisor_remove_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_remove_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[313]"></a>modem_supervisor_scheduler</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, modem_supervisor.o(i.modem_supervisor_scheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_scheduler &rArr; modem_supervisor_launch_task &rArr; lorawan_api_send_stack_cid_req &rArr; lr1mac_core_send_stack_cid_req &rArr; lr1mac_core_payload_send &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_state_get
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[231]"></a>modem_supervisor_update_downlink_frame</STRONG> (Thumb, 108 bytes, Stack size 288 bytes, modem_supervisor.o(i.modem_supervisor_update_downlink_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 1400 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_update_downlink_frame &rArr; dm_downlink &rArr; dm_parse_cmd &rArr; dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_downlink_frame
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_downlink_frame
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_port
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dm_retrieve_pending_dl
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_retrieve_pending_dl
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_retrieve_dl
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_downlink
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_downlink_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_downlink_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_beacon_callback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_a_downlink_callback
</UL>

<P><STRONG><a name="[311]"></a>modem_supervisor_update_task</STRONG> (Thumb, 388 bytes, Stack size 24 bytes, modem_supervisor.o(i.modem_supervisor_update_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = modem_supervisor_update_task &rArr; lorawan_api_class_c_start &rArr; lr1mac_class_c_start &rArr; lr1mac_class_c_launch &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_crash_log
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_extended_callback
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_duty_cycle_disabled_by_host
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_reset_dm_tag_number
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dm_retrieve_pending_dl
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_join_status_clear
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_isjoined
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_is_time_valid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_ping_slot_info_req_status
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_link_check_ans
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_device_time_req_status
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_duty_cycle_enable_set
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_start
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_crashlog_status
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_retrieve_dl
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_modem_mute
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status_now
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_muted
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_modem_joined
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_status_joining
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_task_update
</UL>
<BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_scheduler
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[345]"></a>ral_sx128x_bsp_get_reg_mode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x_bsp.o(i.ral_sx128x_bsp_get_reg_mode))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_tx_consumption_in_ua
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_rx_consumption_in_ua
</UL>

<P><STRONG><a name="[32d]"></a>ral_sx128x_bsp_get_tx_cfg</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, ral_sx128x_bsp.o(i.ral_sx128x_bsp_get_tx_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ral_sx128x_bsp_get_tx_cfg &rArr; smtc_modem_get_tx_power_offset_db
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_tx_power_offset_db
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_tx_cfg
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_tx_consumption_in_ua
</UL>

<P><STRONG><a name="[63]"></a>ral_sx128x_cal_img</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_cal_img))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>ral_sx128x_cfg_rx_boosted</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_cfg_rx_boosted))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>ral_sx128x_clear_irq_status</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_clear_irq_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ral_sx128x_clear_irq_status &rArr; sx128x_clear_irq_status &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_clear_irq_status
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_irq_flags_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>ral_sx128x_get_and_clear_irq_status</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_and_clear_irq_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ral_sx128x_get_and_clear_irq_status &rArr; sx128x_get_and_clear_irq_status &rArr; sx128x_get_irq_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_and_clear_irq_status
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_irq_flags_to_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>ral_sx128x_get_flrc_rx_pkt_status</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_flrc_rx_pkt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_get_flrc_rx_pkt_status &rArr; sx128x_get_flrc_pkt_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_pkt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>ral_sx128x_get_flrc_time_on_air_in_ms</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_flrc_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ral_sx128x_get_flrc_time_on_air_in_ms &rArr; ral_sx128x_convert_flrc_mod_params_from_ral &rArr; sx128x_get_flrc_br_bw_param
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_time_on_air_in_ms
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_flrc_pkt_params_from_ral
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_flrc_mod_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>ral_sx128x_get_gfsk_rx_consumption_in_ua</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, ral_sx128x.o(i.ral_sx128x_get_gfsk_rx_consumption_in_ua))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ral_sx128x_get_gfsk_rx_consumption_in_ua
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>ral_sx128x_get_gfsk_rx_pkt_status</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_gfsk_rx_pkt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_get_gfsk_rx_pkt_status &rArr; sx128x_get_gfsk_pkt_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_pkt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>ral_sx128x_get_gfsk_time_on_air_in_ms</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_gfsk_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ral_sx128x_get_gfsk_time_on_air_in_ms &rArr; ral_sx128x_convert_gfsk_mod_params_from_ral &rArr; sx128x_get_gfsk_mod_ind_param
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_time_on_air_in_ms
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_gfsk_pkt_params_from_ral
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_gfsk_mod_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>ral_sx128x_get_irq_status</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_irq_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_get_irq_status &rArr; sx128x_get_irq_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_irq_status
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_irq_flags_to_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>ral_sx128x_get_lora_rx_consumption_in_ua</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_lora_rx_consumption_in_ua))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ral_sx128x_get_lora_rx_consumption_in_ua
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_bsp_get_reg_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>ral_sx128x_get_lora_rx_pkt_cr_crc</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_lora_rx_pkt_cr_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ral_sx128x_get_lora_rx_pkt_cr_crc &rArr; sx128x_get_lora_rx_pkt_crc_present &rArr; sx128x_read_register &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_rx_pkt_crc_present
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_rx_pkt_cr
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_cr_to_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>ral_sx128x_get_lora_rx_pkt_status</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_lora_rx_pkt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_get_lora_rx_pkt_status &rArr; sx128x_get_lora_pkt_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_pkt_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>ral_sx128x_get_lora_time_on_air_in_ms</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_lora_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ral_sx128x_get_lora_time_on_air_in_ms &rArr; sx128x_get_lora_time_on_air_in_ms &rArr; sx128x_get_lora_time_on_air_numerator
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_time_on_air_in_ms
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_pkt_params_from_ral
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_mod_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>ral_sx128x_get_pkt_payload</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, ral_sx128x.o(i.ral_sx128x_get_pkt_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = ral_sx128x_get_pkt_payload &rArr; sx128x_get_lora_pkt_len_mode &rArr; sx128x_read_register &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_buffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_rx_buffer_status
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_pkt_type
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_pkt_len_mode
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_pkt_len
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>ral_sx128x_get_pkt_type</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_get_pkt_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_get_pkt_type &rArr; sx128x_get_pkt_type &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_pkt_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>ral_sx128x_get_random_numbers</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_get_random_numbers))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>ral_sx128x_get_rssi_inst</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_get_rssi_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ral_sx128x_get_rssi_inst &rArr; sx128x_get_rssi_inst &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_rssi_inst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>ral_sx128x_get_tx_consumption_in_ua</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, ral_sx128x.o(i.ral_sx128x_get_tx_consumption_in_ua))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ral_sx128x_get_tx_consumption_in_ua &rArr; ral_sx128x_bsp_get_tx_cfg &rArr; smtc_modem_get_tx_power_offset_db
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_bsp_get_tx_cfg
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_bsp_get_reg_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>ral_sx128x_handles_part</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_handles_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ral_sx128x_handles_part
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>ral_sx128x_init</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ral_sx128x_init &rArr; sx128x_set_reg_mode &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_bsp_get_reg_mode
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_reg_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>ral_sx128x_lr_fhss_build_frame</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_lr_fhss_build_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_sx128x_lr_fhss_build_frame
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>ral_sx128x_lr_fhss_get_hop_sequence_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_lr_fhss_get_hop_sequence_count))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>ral_sx128x_lr_fhss_get_time_on_air_in_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_lr_fhss_get_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ral_sx128x_lr_fhss_get_time_on_air_in_ms
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>ral_sx128x_lr_fhss_handle_hop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_lr_fhss_handle_hop))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>ral_sx128x_lr_fhss_handle_tx_done</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_lr_fhss_handle_tx_done))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>ral_sx128x_lr_fhss_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_lr_fhss_init))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>ral_sx128x_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ral_sx128x_reset &rArr; sx128x_reset &rArr; sx128x_hal_reset &rArr; hal_gpio_set_value &rArr; am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>ral_sx128x_set_dio_irq_params</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_dio_irq_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = ral_sx128x_set_dio_irq_params &rArr; sx128x_set_dio_irq_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_dio_irq_params
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_irq_flags_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>ral_sx128x_set_flrc_crc_params</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_flrc_crc_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = ral_sx128x_set_flrc_crc_params &rArr; sx128x_set_flrc_crc_seed &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_crc_seed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>ral_sx128x_set_flrc_mod_params</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_flrc_mod_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ral_sx128x_set_flrc_mod_params &rArr; sx128x_set_flrc_mod_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_mod_params
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_flrc_mod_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>ral_sx128x_set_flrc_pkt_params</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_flrc_pkt_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ral_sx128x_set_flrc_pkt_params &rArr; sx128x_set_flrc_pkt_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_pkt_params
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_flrc_pkt_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>ral_sx128x_set_flrc_sync_word</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_flrc_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ral_sx128x_set_flrc_sync_word &rArr; sx128x_set_flrc_sync_word &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_sync_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>ral_sx128x_set_fs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_set_fs))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>ral_sx128x_set_gfsk_crc_params</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_gfsk_crc_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ral_sx128x_set_gfsk_crc_params &rArr; sx128x_set_gfsk_crc_seed &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_crc_seed
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_crc_polynomial
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>ral_sx128x_set_gfsk_mod_params</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_gfsk_mod_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ral_sx128x_set_gfsk_mod_params &rArr; sx128x_set_gfsk_mod_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_mod_params
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_gfsk_mod_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>ral_sx128x_set_gfsk_pkt_params</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_gfsk_pkt_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ral_sx128x_set_gfsk_pkt_params &rArr; sx128x_set_gfsk_pkt_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_pkt_params
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_gfsk_pkt_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>ral_sx128x_set_gfsk_sync_word</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_gfsk_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ral_sx128x_set_gfsk_sync_word &rArr; sx128x_set_gfsk_sync_word &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_sync_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>ral_sx128x_set_gfsk_whitening_seed</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_gfsk_whitening_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = ral_sx128x_set_gfsk_whitening_seed &rArr; sx128x_set_gfsk_ble_whitening_seed &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_ble_whitening_seed
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>ral_sx128x_set_lora_cad</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_set_lora_cad))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ral_sx128x_set_lora_cad &rArr; sx128x_set_cad &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_cad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>ral_sx128x_set_lora_cad_params</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_set_lora_cad_params))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>ral_sx128x_set_lora_mod_params</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_lora_mod_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = ral_sx128x_set_lora_mod_params &rArr; sx128x_set_lora_mod_params &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_mod_params
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_mod_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>ral_sx128x_set_lora_pkt_params</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_lora_pkt_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = ral_sx128x_set_lora_pkt_params &rArr; sx128x_set_lora_pkt_params &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_pkt_params
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_pkt_params_from_ral
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>ral_sx128x_set_lora_symb_nb_timeout</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_set_lora_symb_nb_timeout))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>ral_sx128x_set_lora_sync_word</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_lora_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = ral_sx128x_set_lora_sync_word &rArr; sx128x_set_lora_sync_word &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_sync_word
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>ral_sx128x_set_pkt_payload</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_set_pkt_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_set_pkt_payload &rArr; sx128x_write_buffer &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_buffer
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_buffer_base_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>ral_sx128x_set_pkt_type</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_pkt_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ral_sx128x_set_pkt_type &rArr; sx128x_set_pkt_type &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_pkt_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>ral_sx128x_set_rf_freq</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_rf_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_set_rf_freq &rArr; sx128x_set_rf_freq &rArr; sx128x_set_rf_freq_in_pll_steps &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rf_freq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>ral_sx128x_set_rx</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ral_sx128x_set_rx &rArr; sx128x_set_rx &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>ral_sx128x_set_rx_duty_cycle</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_rx_duty_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = ral_sx128x_set_rx_duty_cycle &rArr; sx128x_set_rx_duty_cycle &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rx_duty_cycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>ral_sx128x_set_rx_tx_fallback_mode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_rx_tx_fallback_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ral_sx128x_set_rx_tx_fallback_mode &rArr; sx128x_set_auto_fs &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_auto_fs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>ral_sx128x_set_sleep</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ral_sx128x_set_sleep &rArr; sx128x_set_sleep &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_sleep
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_save_context
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>ral_sx128x_set_standby</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_set_standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = ral_sx128x_set_standby &rArr; sx128x_set_standby &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_standby
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>ral_sx128x_set_tx</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_set_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = ral_sx128x_set_tx &rArr; sx128x_set_tx &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>ral_sx128x_set_tx_cfg</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, ral_sx128x.o(i.ral_sx128x_set_tx_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = ral_sx128x_set_tx_cfg &rArr; sx128x_set_tx_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_bsp_get_tx_cfg
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx_params
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>ral_sx128x_set_tx_cw</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_set_tx_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ral_sx128x_set_tx_cw &rArr; sx128x_set_tx_cw &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx_cw
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>ral_sx128x_set_tx_infinite_preamble</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_set_tx_infinite_preamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = ral_sx128x_set_tx_infinite_preamble &rArr; sx128x_set_tx_infinite_preamble &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx_infinite_preamble
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>ral_sx128x_stop_timer_on_preamble</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_stop_timer_on_preamble))
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>ral_sx128x_wakeup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ral_sx128x.o(i.ral_sx128x_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = ral_sx128x_wakeup &rArr; sx128x_wakeup &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_wakeup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>ralf_sx128x_setup_flrc</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ralf_sx128x.o(i.ralf_sx128x_setup_flrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ralf_sx128x_setup_flrc &rArr; ral_set_tx_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_tx_cfg
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_rf_freq
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_pkt_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>ralf_sx128x_setup_gfsk</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ralf_sx128x.o(i.ralf_sx128x_setup_gfsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ralf_sx128x_setup_gfsk &rArr; ral_set_tx_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_tx_cfg
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_rf_freq
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_pkt_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>ralf_sx128x_setup_lora</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, ralf_sx128x.o(i.ralf_sx128x_setup_lora))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ralf_sx128x_setup_lora &rArr; ral_set_tx_cfg
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_tx_cfg
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_rf_freq
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_pkt_type
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(.constdata)
</UL>
<P><STRONG><a name="[375]"></a>region_ww2g4_build_channel_mask</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, region_ww2g4.o(i.region_ww2g4_build_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = region_ww2g4_build_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT8
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_ARE_CLR_BYTE8
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_build_channel_mask
</UL>

<P><STRONG><a name="[379]"></a>region_ww2g4_config</STRONG> (Thumb, 392 bytes, Stack size 8 bytes, region_ww2g4.o(i.region_ww2g4_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = region_ww2g4_config &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[37a]"></a>region_ww2g4_get_join_next_channel</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, region_ww2g4.o(i.region_ww2g4_get_join_next_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = region_ww2g4_get_join_next_channel &rArr; region_ww2g4_get_next_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_next_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_join_next_channel
</UL>

<P><STRONG><a name="[37c]"></a>region_ww2g4_get_modulation_type_from_datarate</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, region_ww2g4.o(i.region_ww2g4_get_modulation_type_from_datarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = region_ww2g4_get_modulation_type_from_datarate &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
</UL>

<P><STRONG><a name="[37b]"></a>region_ww2g4_get_next_channel</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, region_ww2g4.o(i.region_ww2g4_get_next_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = region_ww2g4_get_next_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_join_next_channel
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
</UL>

<P><STRONG><a name="[37e]"></a>region_ww2g4_init</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, region_ww2g4.o(i.region_ww2g4_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = region_ww2g4_init &rArr; SMTC_PUT_BIT8 &rArr; SMTC_SET_BIT8
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT8
</UL>
<BR>[Called By]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
</UL>

<P><STRONG><a name="[37f]"></a>region_ww2g4_lora_dr_to_sf_bw</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, region_ww2g4.o(i.region_ww2g4_lora_dr_to_sf_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
</UL>

<P><STRONG><a name="[380]"></a>region_ww2g4_set_channel_mask</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, region_ww2g4.o(i.region_ww2g4_set_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = region_ww2g4_set_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_mask
</UL>

<P><STRONG><a name="[381]"></a>region_ww2g4_set_rx_config</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, region_ww2g4.o(i.region_ww2g4_set_rx_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = region_ww2g4_set_rx_config &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx_config
</UL>

<P><STRONG><a name="[167]"></a>rp_get_and_clear_raw_radio_irq</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, radio_planner.o(i.rp_get_and_clear_raw_radio_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rp_get_and_clear_raw_radio_irq &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_end
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_0
</UL>

<P><STRONG><a name="[387]"></a>rp_get_pkt_payload</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, radio_planner.o(i.rp_get_pkt_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
</UL>
<BR>[Called By]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_irq_get_status
</UL>

<P><STRONG><a name="[166]"></a>rp_get_status</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, radio_planner.o(i.rp_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = rp_get_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_end
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rp_callback
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rp_callback
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_1
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;callback_rp_user_radio_access_0
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_radio_access_callback
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rp_callback
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_rp_callback
</UL>

<P><STRONG><a name="[388]"></a>rp_hal_critical_section_begin</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio_planner_hal.o(i.rp_hal_critical_section_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rp_hal_critical_section_begin &rArr; smtc_modem_hal_disable_modem_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_disable_modem_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
</UL>

<P><STRONG><a name="[386]"></a>rp_hal_critical_section_end</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio_planner_hal.o(i.rp_hal_critical_section_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rp_hal_critical_section_end &rArr; smtc_modem_hal_enable_modem_irq &rArr; hal_gpio_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_enable_modem_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
</UL>

<P><STRONG><a name="[389]"></a>rp_hal_get_radio_irq_timestamp_in_100us</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio_planner_hal.o(i.rp_hal_get_radio_irq_timestamp_in_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rp_hal_get_radio_irq_timestamp_in_100us &rArr; smtc_modem_hal_get_radio_irq_timestamp_in_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_radio_irq_timestamp_in_100us
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[38b]"></a>rp_hal_get_time_in_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio_planner_hal.o(i.rp_hal_get_time_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rp_hal_get_time_in_ms &rArr; smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[38c]"></a>rp_hal_irq_clear_pending</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio_planner_hal.o(i.rp_hal_irq_clear_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rp_hal_irq_clear_pending &rArr; smtc_modem_hal_radio_irq_clear_pending &rArr; hal_gpio_clear_pending_irq &rArr; am_hal_gpio_interrupt_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_radio_irq_clear_pending
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
</UL>

<P><STRONG><a name="[38e]"></a>rp_hal_timer_start</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, radio_planner_hal.o(i.rp_hal_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rp_hal_timer_start &rArr; smtc_modem_hal_start_timer &rArr; hal_lp_timer_start &rArr; am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_set_alarm
</UL>

<P><STRONG><a name="[390]"></a>rp_hal_timer_stop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio_planner_hal.o(i.rp_hal_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rp_hal_timer_stop &rArr; smtc_modem_hal_stop_timer &rArr; hal_lp_timer_stop &rArr; am_hal_ctimer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_stop_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_set_alarm
</UL>

<P><STRONG><a name="[1a1]"></a>rp_hook_get_id</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, radio_planner.o(i.rp_hook_get_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rp_hook_get_id &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rp_callback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rp_callback
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_rp_hook_id_get
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rp_callback
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_parser
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_rp_callback
</UL>

<P><STRONG><a name="[2d7]"></a>rp_hook_init</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, radio_planner.o(i.rp_hook_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_init
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_init
</UL>

<P><STRONG><a name="[393]"></a>rp_init</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, radio_planner.o(i.rp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rp_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
</UL>

<P><STRONG><a name="[46]"></a>rp_radio_irq_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio_planner.o(i.rp_radio_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = rp_radio_irq_callback &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_launch_callback_for_rp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_modem.o(i.smtc_modem_init)
</UL>
<P><STRONG><a name="[2d6]"></a>rp_release_hook</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, radio_planner.o(i.rp_release_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rp_release_hook &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_init
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_init
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_init
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_init
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
</UL>

<P><STRONG><a name="[2dc]"></a>rp_task_abort</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, radio_planner.o(i.rp_task_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 752 + Unknown Stack Size
<LI>Call Chain = rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_end
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_begin
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_stop
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_stop
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_nop
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_abort
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_launch_callback_for_rp
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_stop
</UL>

<P><STRONG><a name="[164]"></a>rp_task_enqueue</STRONG> (Thumb, 538 bytes, Stack size 32 bytes, radio_planner.o(i.rp_task_enqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_get_time_in_ms
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_end
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_begin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_compute_ranking
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>

<P><STRONG><a name="[1ae]"></a>set_dm_info</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, modem_context.o(i.set_dm_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = set_dm_info &rArr; modem_supervisor_add_task_crash_log &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_crash_log
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_requested_dm_info_bytes_to_bitfield
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_reset
</UL>

<P><STRONG><a name="[18c]"></a>set_dm_retrieve_pending_dl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, modem_context.o(i.set_dm_retrieve_pending_dl))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_downlink
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_class_b_to_generate_event
</UL>

<P><STRONG><a name="[14f]"></a>set_modem_adr_profile</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, modem_context.o(i.set_modem_adr_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = set_modem_adr_profile &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_mask_tx_dr_channel_up_dwell_time_check
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_strategy_set
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_custom_set
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_adr_set_profile
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;backoff_mobile_static
</UL>

<P><STRONG><a name="[1bd]"></a>set_modem_dm_interval</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem_context.o(i.set_modem_dm_interval))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_dm_set_info_interval
</UL>

<P><STRONG><a name="[320]"></a>set_modem_downlink_frame</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, modem_context.o(i.set_modem_downlink_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = set_modem_downlink_frame &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
</UL>

<P><STRONG><a name="[307]"></a>set_modem_event_count_and_status</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, modem_context.o(i.set_modem_event_count_and_status))
<BR><BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_run_engine
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_event_init
</UL>

<P><STRONG><a name="[1c0]"></a>set_modem_region</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, modem_context.o(i.set_modem_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = set_modem_region &rArr; lorawan_api_set_region &rArr; lr1mac_core_set_region &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_region
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_region
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
</UL>

<P><STRONG><a name="[315]"></a>set_modem_start_time_s</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, modem_context.o(i.set_modem_start_time_s))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[308]"></a>set_modem_status_joining</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modem_context.o(i.set_modem_status_joining))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[1eb]"></a>set_modem_status_modem_joined</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modem_context.o(i.set_modem_status_modem_joined))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_status
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[1c1]"></a>set_modem_status_modem_mute</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modem_context.o(i.set_modem_status_modem_mute))
<BR><BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_number_of_days_mute
</UL>

<P><STRONG><a name="[318]"></a>set_modem_status_reset_after_crash</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modem_context.o(i.set_modem_status_reset_after_crash))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[232]"></a>smtc_beacon_class_b_enable_service</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, smtc_beacon_sniff.o(i.smtc_beacon_class_b_enable_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = smtc_beacon_class_b_enable_service &rArr; smtc_beacon_sniff_stop &rArr; smtc_ping_slot_stop &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_enabled
</UL>

<P><STRONG><a name="[226]"></a>smtc_beacon_sniff_get_metadata</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, smtc_beacon_sniff.o(i.smtc_beacon_sniff_get_metadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smtc_beacon_sniff_get_metadata &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_beacon_get_metadata
</UL>

<P><STRONG><a name="[254]"></a>smtc_beacon_sniff_init</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, smtc_beacon_sniff.o(i.smtc_beacon_sniff_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = smtc_beacon_sniff_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
</UL>

<P><STRONG><a name="[43]"></a>smtc_beacon_sniff_rp_callback</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, smtc_beacon_sniff.o(i.smtc_beacon_sniff_rp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = smtc_beacon_sniff_rp_callback &rArr; smtc_ping_slot_start &rArr; smtc_real_get_rx_window_parameters &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_get_status_push_network_downlink_to_user
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_epoch_time
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_state
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_rx_nb_symb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_pll
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_beacon
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_sf
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_beacon_metadata
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_debug_print
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_stop
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_init_after_beacon
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_beacon_sniff.o(i.smtc_beacon_sniff_init)
</UL>
<P><STRONG><a name="[233]"></a>smtc_beacon_sniff_start</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, smtc_beacon_sniff.o(i.smtc_beacon_sniff_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000 + Unknown Stack Size
<LI>Call Chain = smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_convert_rtc_to_gps_epoch_time
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_enabled
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[3a5]"></a>smtc_beacon_sniff_stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, smtc_beacon_sniff.o(i.smtc_beacon_sniff_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = smtc_beacon_sniff_stop &rArr; smtc_ping_slot_stop &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_class_b_enable_service
</UL>

<P><STRONG><a name="[216]"></a>smtc_decode_beacon_epoch_time</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, smtc_beacon_sniff.o(i.smtc_decode_beacon_epoch_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_decode_beacon_epoch_time &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_build_beacon_rx_status_ind
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_beacon
</UL>

<P><STRONG><a name="[287]"></a>smtc_decode_beacon_gw_specific</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, smtc_beacon_sniff.o(i.smtc_decode_beacon_gw_specific))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = smtc_decode_beacon_gw_specific &rArr; get_beacon_length &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_length
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_build_beacon_rx_status_ind
</UL>

<P><STRONG><a name="[286]"></a>smtc_decode_beacon_param</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_beacon_sniff.o(i.smtc_decode_beacon_param))
<BR><BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_build_beacon_rx_status_ind
</UL>

<P><STRONG><a name="[3ae]"></a>smtc_duty_cycle_band_get_available_toa_ms</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_band_get_available_toa_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = smtc_duty_cycle_band_get_available_toa_ms &rArr; smtc_duty_cycle_get_band_consumed_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_band_consumed_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_is_band_free
</UL>

<P><STRONG><a name="[23e]"></a>smtc_duty_cycle_enable_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_enable_set))
<BR><BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_duty_cycle_enable_set
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[2f0]"></a>smtc_duty_cycle_get_next_free_time_ms</STRONG> (Thumb, 490 bytes, Stack size 96 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_get_next_free_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_is_band_free
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_band_get_available_toa_ms
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_time_diff
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_put_band_in_array
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_band
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_compute_index
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
</UL>

<P><STRONG><a name="[3b5]"></a>smtc_duty_cycle_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = smtc_duty_cycle_init &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[3b1]"></a>smtc_duty_cycle_is_band_free</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_is_band_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = smtc_duty_cycle_is_band_free &rArr; smtc_duty_cycle_band_get_available_toa_ms &rArr; smtc_duty_cycle_get_band_consumed_time_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_band_get_available_toa_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
</UL>

<P><STRONG><a name="[2f7]"></a>smtc_duty_cycle_sum</STRONG> (Thumb, 260 bytes, Stack size 40 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = smtc_duty_cycle_sum &rArr; smtc_duty_cycle_compute_index
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_time_diff
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_band
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_compute_index
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[2e9]"></a>smtc_duty_cycle_update</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = smtc_duty_cycle_update &rArr; smtc_duty_cycle_compute_index
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_time_diff
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_compute_index
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
</UL>

<P><STRONG><a name="[2f3]"></a>smtc_lbt_get_state</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smtc_lbt.o(i.smtc_lbt_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[3b6]"></a>smtc_lbt_init</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, smtc_lbt.o(i.smtc_lbt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[45]"></a>smtc_lbt_launch_callback_for_rp</STRONG> (Thumb, 418 bytes, Stack size 32 bytes, smtc_lbt.o(i.smtc_lbt_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = smtc_lbt_launch_callback_for_rp &rArr; rp_radio_irq_callback &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq_callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_lbt.o(i.smtc_lbt_listen_channel)
</UL>
<P><STRONG><a name="[2f4]"></a>smtc_lbt_listen_channel</STRONG> (Thumb, 348 bytes, Stack size 240 bytes, smtc_lbt.o(i.smtc_lbt_listen_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = smtc_lbt_listen_channel &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_radio_tcxo_startup_delay_ms
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[44]"></a>smtc_lbt_rp_callback</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, smtc_lbt.o(i.smtc_lbt_rp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = smtc_lbt_rp_callback &rArr; rp_get_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_lbt.o(i.smtc_lbt_init)
</UL>
<P><STRONG><a name="[3e2]"></a>smtc_lbt_set_parameters</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, smtc_lbt.o(i.smtc_lbt_set_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_lbt_set_parameters
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[3e3]"></a>smtc_lbt_set_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smtc_lbt.o(i.smtc_lbt_set_state))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[289]"></a>smtc_modem_adr_set_profile</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, smtc_modem.o(i.smtc_modem_adr_set_profile))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = smtc_modem_adr_set_profile &rArr; set_modem_adr_profile &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_adr_profile
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_reset_no_rx_packet_in_mobile_mode_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[172]"></a>smtc_modem_alarm_start_timer</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_alarm_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smtc_modem_alarm_start_timer &rArr; smtc_modem_hal_get_time_in_s
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_set_user_alarm
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[2bf]"></a>smtc_modem_crypto_compute_and_add_mic</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_compute_and_add_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = smtc_modem_crypto_compute_and_add_mic &rArr; compute_mic &rArr; smtc_secure_element_compute_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mic
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
</UL>

<P><STRONG><a name="[2a1]"></a>smtc_modem_crypto_compute_join_mic</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_compute_join_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = smtc_modem_crypto_compute_join_mic &rArr; smtc_secure_element_compute_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_compute_aes_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
</UL>

<P><STRONG><a name="[299]"></a>smtc_modem_crypto_derive_skeys</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_derive_skeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = smtc_modem_crypto_derive_skeys &rArr; derive_session_key_1_0_x &rArr; smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_session_key_1_0_x
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
</UL>

<P><STRONG><a name="[3b8]"></a>smtc_modem_crypto_get_class_b_rand</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_get_class_b_rand))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = smtc_modem_crypto_get_class_b_rand &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_set_key
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_first_slot
</UL>

<P><STRONG><a name="[2ab]"></a>smtc_modem_crypto_payload_decrypt</STRONG> (Thumb, 40 bytes, Stack size 48 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_payload_decrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = smtc_modem_crypto_payload_decrypt &rArr; smtc_modem_crypto_payload_encrypt &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_payload_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[2be]"></a>smtc_modem_crypto_payload_encrypt</STRONG> (Thumb, 220 bytes, Stack size 88 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_payload_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = smtc_modem_crypto_payload_encrypt &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_payload_decrypt
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
</UL>

<P><STRONG><a name="[2a7]"></a>smtc_modem_crypto_process_join_accept</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_process_join_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = smtc_modem_crypto_process_join_accept &rArr; smtc_secure_element_process_join_accept &rArr; smtc_secure_element_verify_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_process_join_accept
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[27c]"></a>smtc_modem_crypto_set_key</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = smtc_modem_crypto_set_key &rArr; derive_multicast_root_key &rArr; smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_set_key
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_multicast_root_key
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_multicast_key_encryption_key
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_appkey
</UL>

<P><STRONG><a name="[2aa]"></a>smtc_modem_crypto_verify_mic</STRONG> (Thumb, 124 bytes, Stack size 312 bytes, smtc_modem_crypto.o(i.smtc_modem_crypto_verify_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = smtc_modem_crypto_verify_mic &rArr; smtc_secure_element_verify_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_verify_aes_cmac
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_b0
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
</UL>

<P><STRONG><a name="[17e]"></a>smtc_modem_dm_set_info_interval</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, smtc_modem.o(i.smtc_modem_dm_set_info_interval))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = smtc_modem_dm_set_info_interval &rArr; modem_supervisor_add_task_dm_status &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_dm_interval
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[16a]"></a>smtc_modem_get_event</STRONG> (Thumb, 488 bytes, Stack size 64 bytes, smtc_modem.o(i.smtc_modem_get_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = smtc_modem_get_event &rArr; get_modem_event_status &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_event_count_and_status
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_count
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_last_msg_event
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_asynchronous_msgnumber
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decrement_asynchronous_msgnumber
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_nb_reset_get
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_link_check_ans
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_fifo_obj
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_muted
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_rp_to_user_radio_access_status
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_get
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[28c]"></a>smtc_modem_get_lorawan_version</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_get_lorawan_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smtc_modem_get_lorawan_version &rArr; lorawan_api_get_spec_version &rArr; lr1mac_core_get_lorawan_version
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_spec_version
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[28b]"></a>smtc_modem_get_modem_version</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, smtc_modem.o(i.smtc_modem_get_modem_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_get_modem_version
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[28d]"></a>smtc_modem_get_regional_params_version</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_get_regional_params_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smtc_modem_get_regional_params_version &rArr; lorawan_api_get_regional_parameters_version &rArr; smtc_real_get_regional_parameters_version
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_regional_parameters_version
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
</UL>

<P><STRONG><a name="[32e]"></a>smtc_modem_get_tx_power_offset_db</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_get_tx_power_offset_db))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtc_modem_get_tx_power_offset_db
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_get_tx_power_offset_db
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_bsp_get_tx_cfg
</UL>

<P><STRONG><a name="[165]"></a>smtc_modem_hal_assert_fail</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, smtc_modem_hal.o(i.smtc_modem_hal_assert_fail))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_gfsk_launch_callback_for_rp
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mode_cw_callback_for_rp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_pkt_payload
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_irq_get_status
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_launch_callback_for_rp
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_launch_callback_for_rp
</UL>

<P><STRONG><a name="[221]"></a>smtc_modem_hal_context_restore</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, smtc_modem_hal.o(i.smtc_modem_hal_context_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = smtc_modem_hal_context_restore &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_read_buffer
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_load_context
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_factory_reset
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_load
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_restore_context
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_recover_nvm
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_devnonce_rst
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_devnonce_reset
</UL>

<P><STRONG><a name="[2df]"></a>smtc_modem_hal_context_store</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, smtc_modem_hal.o(i.smtc_modem_hal_context_store))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write_buffer
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_page
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_factory_reset
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_store_context
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_devnonce_rst
</UL>

<P><STRONG><a name="[1d6]"></a>smtc_modem_hal_disable_modem_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_disable_modem_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_disable_modem_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_irq_disable
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_irq_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_set
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_get
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_begin
</UL>

<P><STRONG><a name="[1d7]"></a>smtc_modem_hal_enable_modem_irq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_enable_modem_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = smtc_modem_hal_enable_modem_irq &rArr; hal_gpio_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_irq_enable
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_get
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_critical_section_end
</UL>

<P><STRONG><a name="[1a2]"></a>smtc_modem_hal_get_battery_level</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_battery_level))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_parser
</UL>

<P><STRONG><a name="[196]"></a>smtc_modem_hal_get_board_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_board_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_start_time
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[317]"></a>smtc_modem_hal_get_crashlog_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_crashlog_status))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>

<P><STRONG><a name="[38a]"></a>smtc_modem_hal_get_radio_irq_timestamp_in_100us</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_radio_irq_timestamp_in_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_get_radio_irq_timestamp_in_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_time_100us
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_get_radio_irq_timestamp_in_100us
</UL>

<P><STRONG><a name="[195]"></a>smtc_modem_hal_get_radio_tcxo_startup_delay_ms</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_radio_tcxo_startup_delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_start_time
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[174]"></a>smtc_modem_hal_get_random_nb_in_range</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_random_nb_in_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = smtc_modem_hal_get_random_nb_in_range &rArr; hal_rng_get_random_in_range &rArr; hal_rng_get_random
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rng_get_random_in_range
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_crash_log
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_next_channel
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status_now
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_send_stack_cid_req
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_dr
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[1ec]"></a>smtc_modem_hal_get_temperature</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_temperature))
<BR><BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_temp
</UL>

<P><STRONG><a name="[32c]"></a>smtc_modem_hal_get_time_in_100us</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_time_in_100us))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_get_time_in_100us
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_time_100us
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_mac_rx_lora_launch_callback_for_rp
</UL>

<P><STRONG><a name="[157]"></a>smtc_modem_hal_get_time_in_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_time_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_get_time_in_ms
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_send_stack_cid_req
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_gfsk_launch_callback_for_rp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_sum
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_network_next_free_duty_cycle_ms_get
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_free_lbt
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_session_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_radio_busy_lbt
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_freq_req_parser
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_get_time_in_ms
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_launch_callback_for_rp
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_launch_callback_for_rp
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>

<P><STRONG><a name="[1cd]"></a>smtc_modem_hal_get_time_in_s</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_time_in_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_get_time_in_s
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_get_time_s
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_ping_slot_info_req
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_link_check_req
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_device_time_req
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_crash_log
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_uptime_s
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_retrieve_dl
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_modem_mute
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status_now
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_is_time_valid
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_alarm_start_timer
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_scheduler
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[1ed]"></a>smtc_modem_hal_get_voltage</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_get_voltage))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_voltage
</UL>

<P><STRONG><a name="[3c9]"></a>smtc_modem_hal_irq_config_radio_irq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, smtc_modem_hal.o(i.smtc_modem_hal_irq_config_radio_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtc_modem_hal_irq_config_radio_irq
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_irq_attach
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
</UL>

<P><STRONG><a name="[153]"></a>smtc_modem_hal_print_trace</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, smtc_modem_hal.o(i.smtc_modem_hal_print_trace))
<BR><BR>[Stack]<UL><LI>Max Depth = 632 + Unknown Stack Size
<LI>Call Chain = smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trace_print
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_region
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_nwkkey
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_joineui
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_deveui
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_downlink_frame
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_adr_profile
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_load_context
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_factory_reset
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_count
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_check_dminfo_size
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_dm_status_max_size
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_set_rx_config
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_set_channel_mask
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_lora_dr_to_sf_bw
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_next_channel
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_modulation_type_from_datarate
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_build_channel_mask
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_downlink_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_downlink_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_beacon_callback
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_a_downlink_callback
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_info
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_number_of_days_mute
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_downlink
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_reset
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_check_cmd_size
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rp_callback
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rp_callback
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_print_stat
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_dm_set_info_interval
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_adr_set_profile
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_modem_connected
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_restore_context
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_init
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_gw_specific
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_epoch_time
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_frequency_valid
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_radio_reset
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_nop
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_remove_task
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_radio_access_callback
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_supported_region
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_join_snapshot_channel_mask
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_join_next_channel
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_recover_nvm
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;load_devnonce_reset
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_tx_frequency_channel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx_config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx1_frequency_channel
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_power
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_mask
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_enabled
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_dr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_header_count
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_grid
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_dr_to_cr_bw
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_power_valid
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_valid
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx_dr_valid
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx1_dr_offset_valid
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_payload_size_valid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_nwk_received_tx_frequency_valid
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_mask_for_mobile_mode
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_index_valid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_session
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_after_join_snapshot_channel_mask
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_tx_channel_frequency
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx1_channel_frequency
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_max_payload_size
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lr_fhss_sync_word
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_frequency
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr_simulation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_clamp_output_power_eirp_vs_freq_and_dr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_build_channel_mask
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_min_size_check
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_mhdr_extract
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_fhdr_extract
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_fcnt_dwn_accept
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_max_size_check
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rp_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_param_setup_parser
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_timing_setup_parser
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_param_setup_parser
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_info_ans_parser
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_channel_req_parser
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_downlink_check_under_it
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_check_parser
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;duty_cycle_parser
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_time_ans_parser
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_status_parser
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_freq_req_parser
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_update_time
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_print
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_launch_current
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_call_aborted
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_irq_get_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_callback
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_rx_nb_symb
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_pll
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_launch_callback_for_rp
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_beacon
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_length
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_debug_print
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_first_slot
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_downlink_check
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_rp_callback
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_launch_callback_for_rp
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_downlink_check_under_it
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_ping_slot_frequency
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_number_of_chmask_in_cflist
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_threshold_dbm
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_duration_ms
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_bw_hz
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_enable_all_channels_with_valid_freq
</UL>

<P><STRONG><a name="[38d]"></a>smtc_modem_hal_radio_irq_clear_pending</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_radio_irq_clear_pending))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smtc_modem_hal_radio_irq_clear_pending &rArr; hal_gpio_clear_pending_irq &rArr; am_hal_gpio_interrupt_status_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_clear_pending_irq
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_irq_clear_pending
</UL>

<P><STRONG><a name="[1b9]"></a>smtc_modem_hal_reset_mcu</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_reset_mcu))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_reset_mcu
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_count
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_lora_dr_to_sf_bw
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_modulation_type_from_datarate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_downlink_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_downlink_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_beacon_callback
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_reset
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_join_snapshot_channel_mask
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_join_next_channel
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_tx_frequency_channel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx_config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx1_frequency_channel
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_mask
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_enabled
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_dr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_header_count
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_grid
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_dr_to_cr_bw
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_payload_size_valid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_nwk_received_tx_frequency_valid
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_index_valid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_session
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_after_join_snapshot_channel_mask
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_tx_channel_frequency
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx1_channel_frequency
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_max_payload_size
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lr_fhss_sync_word
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_frequency
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr_simulation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_clamp_output_power_eirp_vs_freq_and_dr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_build_channel_mask
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rp_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_irq_get_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_callback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_length
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_first_slot
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_ping_slot_frequency
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_number_of_chmask_in_cflist
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_threshold_dbm
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_duration_ms
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_bw_hz
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_enable_all_channels_with_valid_freq
</UL>

<P><STRONG><a name="[31d]"></a>smtc_modem_hal_restore_crashlog</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_restore_crashlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_restore_crashlog
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
</UL>

<P><STRONG><a name="[1de]"></a>smtc_modem_hal_set_crashlog_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_set_crashlog_status))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_count
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_lora_dr_to_sf_bw
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_modulation_type_from_datarate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_downlink_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_downlink_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_beacon_callback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_launch_task
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_join_snapshot_channel_mask
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_join_next_channel
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_tx_frequency_channel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx_config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx1_frequency_channel
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_mask
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_enabled
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_dr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_header_count
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_grid
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_dr_to_cr_bw
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_payload_size_valid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_nwk_received_tx_frequency_valid
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_index_valid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_session
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_after_join_snapshot_channel_mask
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_tx_channel_frequency
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx1_channel_frequency
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_max_payload_size
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lr_fhss_sync_word
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_frequency
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr_simulation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_clamp_output_power_eirp_vs_freq_and_dr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_build_channel_mask
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rp_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_irq_get_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_callback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_length
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_first_slot
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_ping_slot_frequency
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_number_of_chmask_in_cflist
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_threshold_dbm
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_duration_ms
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_bw_hz
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_enable_all_channels_with_valid_freq
</UL>

<P><STRONG><a name="[2ae]"></a>smtc_modem_hal_start_radio_tcxo</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_start_radio_tcxo))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = smtc_modem_hal_start_radio_tcxo &rArr; hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_gfsk_launch_callback_for_rp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_launch_callback_for_rp
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_launch_callback_for_rp
</UL>

<P><STRONG><a name="[38f]"></a>smtc_modem_hal_start_timer</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, smtc_modem_hal.o(i.smtc_modem_hal_start_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smtc_modem_hal_start_timer &rArr; hal_lp_timer_start &rArr; am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_timer_start
</UL>

<P><STRONG><a name="[39a]"></a>smtc_modem_hal_stop_radio_tcxo</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, smtc_modem_hal.o(i.smtc_modem_hal_stop_radio_tcxo))
<BR><BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_radio_reset
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[391]"></a>smtc_modem_hal_stop_timer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_stop_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = smtc_modem_hal_stop_timer &rArr; hal_lp_timer_stop &rArr; am_hal_ctimer_stop
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_timer_stop
</UL>

<P><STRONG><a name="[1dd]"></a>smtc_modem_hal_store_crashlog</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, smtc_modem_hal.o(i.smtc_modem_hal_store_crashlog))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_modem_hal_store_crashlog
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_status
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_event_count
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_interval_second
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_lora_dr_to_sf_bw
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_modulation_type_from_datarate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_downlink_callback
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_downlink_callback
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_beacon_callback
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_listen_channel
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_and_clear_raw_radio_irq
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_join_snapshot_channel_mask
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_join_next_channel
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_tx_frequency_channel
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx_config
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx1_frequency_channel
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_mask
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_enabled
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_dr
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_header_count
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_get_grid
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lr_fhss_dr_to_cr_bw
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_payload_size_valid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_nwk_received_tx_frequency_valid
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_index_valid
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_session
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_after_join_snapshot_channel_mask
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_tx_channel_frequency
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx1_channel_frequency
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_max_payload_size
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lr_fhss_sync_word
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_frequency
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr_simulation
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_clamp_output_power_eirp_vs_freq_and_dr
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_build_channel_mask
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_encrypt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_frame_decode
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rp_callback
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_irq_get_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_callback
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_length
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_first_slot
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rx_frame_decode
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_ping_slot_frequency
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_number_of_chmask_in_cflist
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_threshold_dbm
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_duration_ms
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_bw_hz
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_enable_all_channels_with_valid_freq
</UL>

<P><STRONG><a name="[3ca]"></a>smtc_modem_init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = smtc_modem_init &rArr; smtc_secure_element_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_set_modem_radio_ctx
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_irq_config_radio_irq
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_init
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_radio
</UL>

<P><STRONG><a name="[16c]"></a>smtc_modem_join_network</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_join_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = smtc_modem_join_network &rArr; modem_supervisor_add_task_join &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_suspend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_activation_mode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_join
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_muted
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[180]"></a>smtc_modem_leave_network</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, smtc_modem.o(i.smtc_modem_leave_network))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_leave
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_set_conf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[188]"></a>smtc_modem_request_uplink</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, smtc_modem.o(i.smtc_modem_request_uplink))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = smtc_modem_request_uplink &rArr; smtc_modem_send_tx &rArr; is_modem_connected &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[2ff]"></a>smtc_modem_run_engine</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_run_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 2520 + Unknown Stack Size
<LI>Call Chain = smtc_modem_run_engine &rArr; modem_supervisor_engine &rArr; certification_event_handler &rArr; smtc_modem_set_certification_mode &rArr; smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_event_count_and_status
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_fifo_obj
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_get_nb_elt
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>smtc_modem_set_certification_mode</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_set_certification_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 1904 + Unknown Stack Size
<LI>Call Chain = smtc_modem_set_certification_mode &rArr; smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_set
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_store_context
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_duty_cycle_app_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[1df]"></a>smtc_modem_set_deveui</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_set_deveui))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_modem_set_deveui &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_deveui
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event
</UL>

<P><STRONG><a name="[1e0]"></a>smtc_modem_set_joineui</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_set_joineui))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_modem_set_joineui &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_joineui
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event
</UL>

<P><STRONG><a name="[1e1]"></a>smtc_modem_set_nwkkey</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_set_nwkkey))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_modem_set_nwkkey &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_set_appkey
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event
</UL>

<P><STRONG><a name="[1e2]"></a>smtc_modem_set_region</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, smtc_modem.o(i.smtc_modem_set_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + Unknown Stack Size
<LI>Call Chain = smtc_modem_set_region &rArr; set_modem_region &rArr; lorawan_api_set_region &rArr; lr1mac_core_set_region &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_region
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_event
</UL>

<P><STRONG><a name="[175]"></a>smtc_modem_test_duty_cycle_app_activate</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smtc_modem_test.o(i.smtc_modem_test_duty_cycle_app_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtc_modem_test_duty_cycle_app_activate &rArr; lorawan_api_duty_cycle_enable_set
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_set_duty_cycle_disabled_by_host
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_duty_cycle_enable_set
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_certification_parser
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_certification_mode
</UL>

<P><STRONG><a name="[3d1]"></a>smtc_modem_test_nop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, smtc_modem_test.o(i.smtc_modem_test_nop))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = smtc_modem_test_nop &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_radio_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_stop
</UL>

<P><STRONG><a name="[3d2]"></a>smtc_modem_test_radio_reset</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, smtc_modem_test.o(i.smtc_modem_test_radio_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_modem_test_radio_reset &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_stop_radio_tcxo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_nop
</UL>

<P><STRONG><a name="[182]"></a>smtc_modem_test_start</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, smtc_modem_test.o(i.smtc_modem_test_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = smtc_modem_test_start &rArr; lorawan_api_init &rArr; lr1mac_core_init &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_set_test_mode_status
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_context_get_modem_rp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_stack_mac_get
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_rp_hook_id_get
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[170]"></a>smtc_modem_test_stop</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, smtc_modem_test.o(i.smtc_modem_test_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 824 + Unknown Stack Size
<LI>Call Chain = smtc_modem_test_stop &rArr; lorawan_api_init &rArr; lr1mac_core_init &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_set_test_mode_status
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_nop
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[183]"></a>smtc_modem_test_tx_cw</STRONG> (Thumb, 234 bytes, Stack size 200 bytes, smtc_modem_test.o(i.smtc_modem_test_tx_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 936 + Unknown Stack Size
<LI>Call Chain = smtc_modem_test_tx_cw &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_test_mode_status
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_sync_word
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_frequency_valid
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[3d8]"></a>smtc_ping_slot_compute_first_slot</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, smtc_ping_slot.o(i.smtc_ping_slot_compute_first_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_compute_first_slot &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_get_class_b_rand
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_init_after_beacon
</UL>

<P><STRONG><a name="[253]"></a>smtc_ping_slot_init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, smtc_ping_slot.o(i.smtc_ping_slot_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_release_hook
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_init
</UL>

<P><STRONG><a name="[3a9]"></a>smtc_ping_slot_init_after_beacon</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, smtc_ping_slot.o(i.smtc_ping_slot_init_after_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_init_after_beacon &rArr; smtc_ping_slot_compute_first_slot &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_first_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[38]"></a>smtc_ping_slot_mac_rp_callback</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, smtc_ping_slot.o(i.smtc_ping_slot_mac_rp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_mac_rp_callback &rArr; smtc_ping_slot_mac_rx_frame_decode &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rx_frame_decode
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_downlink_check
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_api.o(i.lorawan_api_init)
</UL>
<P><STRONG><a name="[4d]"></a>smtc_ping_slot_rp_callback</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, smtc_ping_slot.o(i.smtc_ping_slot_rp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1040 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_rp_callback &rArr; smtc_ping_slot_start &rArr; smtc_real_get_rx_window_parameters &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_get_duration_timeout_ms
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_next_ping_offset_time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_ping_slot.o(i.smtc_ping_slot_init)
</UL>
<P><STRONG><a name="[3aa]"></a>smtc_ping_slot_start</STRONG> (Thumb, 1484 bytes, Stack size 264 bytes, smtc_ping_slot.o(i.smtc_ping_slot_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_start &rArr; smtc_real_get_rx_window_parameters &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_board_delay_ms
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_radio_tcxo_startup_delay_ms
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_sync_word
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_is_time_valid
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_convert_rtc_to_gps_epoch_time
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_window_parameters
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_start_time_offset_ms
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_stop
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_search_closest_ping_offset_time
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_get_duration_timeout_ms
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_next_ping_offset_time
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_compute_lora_ldro
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_ping_slot_frequency
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_rp_callback
</UL>

<P><STRONG><a name="[3ab]"></a>smtc_ping_slot_stop</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, smtc_ping_slot.o(i.smtc_ping_slot_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_stop &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_stop
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[219]"></a>smtc_real_build_channel_mask</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_build_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = smtc_real_build_channel_mask &rArr; region_ww2g4_build_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_build_channel_mask
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
</UL>

<P><STRONG><a name="[3e9]"></a>smtc_real_cf_list_type_supported</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_cf_list_type_supported))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
</UL>

<P><STRONG><a name="[2c4]"></a>smtc_real_clamp_output_power_eirp_vs_freq_and_dr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_clamp_output_power_eirp_vs_freq_and_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_real_clamp_output_power_eirp_vs_freq_and_dr &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[2e5]"></a>smtc_real_config</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, smtc_real.o(i.smtc_real_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_set_state
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_set_parameters
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_enable_set
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_lbt_init
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_threshold_dbm
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_duration_ms
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_lbt_bw_hz
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_region
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[155]"></a>smtc_real_decode_freq_from_buf</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_decode_freq_from_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_real_decode_freq_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_param_setup_parser
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_channel_req_parser
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_freq_req_parser
</UL>

<P><STRONG><a name="[2d0]"></a>smtc_real_decrement_dr</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_decrement_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = smtc_real_decrement_dr &rArr; smtc_real_decrement_dr_simulation &rArr; smtc_real_is_tx_dr_acceptable &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_min_tx_channel_dr
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr_simulation
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_enable_all_channels_with_valid_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[2ce]"></a>smtc_real_decrement_dr_simulation</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_decrement_dr_simulation))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = smtc_real_decrement_dr_simulation &rArr; smtc_real_is_tx_dr_acceptable &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[3e4]"></a>smtc_real_enable_all_channels_with_valid_freq</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_enable_all_channels_with_valid_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_enable_all_channels_with_valid_freq &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT8
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr
</UL>

<P><STRONG><a name="[2b6]"></a>smtc_real_fsk_dr_to_bitrate</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_fsk_dr_to_bitrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_fsk_dr_to_bitrate &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
</UL>

<P><STRONG><a name="[2e8]"></a>smtc_real_get_adr_ack_delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_adr_ack_delay))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[2e7]"></a>smtc_real_get_adr_ack_limit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_adr_ack_limit))
<BR><BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[15c]"></a>smtc_real_get_beacon_dr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_beacon_dr))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_state
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_rx_nb_symb
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_beacon
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_start_time
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_beacon_metadata
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[158]"></a>smtc_real_get_beacon_frequency</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_get_beacon_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_beacon_frequency &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_freq_req_parser
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_beacon_metadata
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[15f]"></a>smtc_real_get_coding_rate</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_coding_rate))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>

<P><STRONG><a name="[2ef]"></a>smtc_real_get_current_enabled_frequency_list</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_get_current_enabled_frequency_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = smtc_real_get_current_enabled_frequency_list &rArr; SMTC_GET_BIT8
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
</UL>

<P><STRONG><a name="[2e1]"></a>smtc_real_get_default_max_eirp</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_default_max_eirp))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_strategy_set
</UL>

<P><STRONG><a name="[246]"></a>smtc_real_get_frequency_factor</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_frequency_factor))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_frequency_factor
</UL>

<P><STRONG><a name="[2b7]"></a>smtc_real_get_gfsk_sync_word</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_gfsk_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_gfsk_sync_word &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>

<P><STRONG><a name="[2ea]"></a>smtc_real_get_join_next_channel</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_join_next_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_join_next_channel &rArr; region_ww2g4_get_join_next_channel &rArr; region_ww2g4_get_next_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_join_next_channel
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
</UL>

<P><STRONG><a name="[3df]"></a>smtc_real_get_lbt_bw_hz</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_lbt_bw_hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_lbt_bw_hz &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[3e1]"></a>smtc_real_get_lbt_duration_ms</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_lbt_duration_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_lbt_duration_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[3e0]"></a>smtc_real_get_lbt_threshold_dbm</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_lbt_threshold_dbm))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_lbt_threshold_dbm &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_config
</UL>

<P><STRONG><a name="[2ca]"></a>smtc_real_get_lr_fhss_sync_word</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_lr_fhss_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_lr_fhss_sync_word &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[2d2]"></a>smtc_real_get_max_payload_size</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_get_max_payload_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_max_payload_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_max_payload_length_get
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_max_size_check
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[2e0]"></a>smtc_real_get_min_tx_channel_dr</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_get_min_tx_channel_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = smtc_real_get_min_tx_channel_dr &rArr; SMTC_GET_BIT8
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_strategy_set
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr
</UL>

<P><STRONG><a name="[2b3]"></a>smtc_real_get_modulation_type_from_datarate</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_get_modulation_type_from_datarate))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_modulation_type_from_datarate &rArr; region_ww2g4_get_modulation_type_from_datarate &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_modulation_type_from_datarate
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_window_parameters
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_start_time_offset_ms
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
</UL>

<P><STRONG><a name="[2a2]"></a>smtc_real_get_next_channel</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_next_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_next_channel &rArr; region_ww2g4_get_next_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_get_next_channel
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_radio_busy_lbt
</UL>

<P><STRONG><a name="[2d1]"></a>smtc_real_get_next_dr</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_get_next_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = smtc_real_get_next_dr &rArr; smtc_real_mask_tx_dr_channel_up_dwell_time_check &rArr; SMTC_PUT_BIT16 &rArr; SMTC_SET_BIT16
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_mask_tx_dr_channel_up_dwell_time_check
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_strategy_set
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[3e5]"></a>smtc_real_get_number_of_chmask_in_cflist</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_number_of_chmask_in_cflist))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_number_of_chmask_in_cflist &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
</UL>

<P><STRONG><a name="[3de]"></a>smtc_real_get_ping_slot_frequency</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_get_ping_slot_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_ping_slot_frequency &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[2b5]"></a>smtc_real_get_preamble_len</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_preamble_len))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>

<P><STRONG><a name="[24d]"></a>smtc_real_get_regional_parameters_version</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_get_regional_parameters_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_real_get_regional_parameters_version
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_regional_parameters_version
</UL>

<P><STRONG><a name="[1a8]"></a>smtc_real_get_rx1_channel_frequency</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_get_rx1_channel_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_rx1_channel_frequency &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
</UL>

<P><STRONG><a name="[2eb]"></a>smtc_real_get_rx1_join_delay</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_rx1_join_delay))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
</UL>

<P><STRONG><a name="[2ec]"></a>smtc_real_get_rx2_join_dr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_rx2_join_dr))
<BR><BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
</UL>

<P><STRONG><a name="[197]"></a>smtc_real_get_rx_start_time_offset_ms</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, smtc_real.o(i.smtc_real_get_rx_start_time_offset_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_start_time
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[2ba]"></a>smtc_real_get_rx_window_parameters</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, smtc_real.o(i.smtc_real_get_rx_window_parameters))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_rx_window_parameters &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ceilf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_rx_nb_symb
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[15d]"></a>smtc_real_get_symbol_duration_us</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, smtc_real.o(i.smtc_real_get_symbol_duration_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_window_parameters
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_start_time_offset_ms
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_state
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_beacon_rx_nb_symb
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_get_duration_timeout_ms
</UL>

<P><STRONG><a name="[15e]"></a>smtc_real_get_sync_word</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_get_sync_word))
<BR><BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>

<P><STRONG><a name="[1a6]"></a>smtc_real_get_tx_channel_frequency</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_get_tx_channel_frequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_get_tx_channel_frequency &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
</UL>

<P><STRONG><a name="[2e6]"></a>smtc_real_init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_init
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_region
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[29b]"></a>smtc_real_init_after_join_snapshot_channel_mask</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_init_after_join_snapshot_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_init_after_join_snapshot_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
</UL>

<P><STRONG><a name="[3e7]"></a>smtc_real_init_channel_mask</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_init_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtc_real_init_channel_mask &rArr; memset1
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset1
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
</UL>

<P><STRONG><a name="[2ed]"></a>smtc_real_init_join_snapshot_channel_mask</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_init_join_snapshot_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_init_join_snapshot_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join_status_clear
</UL>

<P><STRONG><a name="[29e]"></a>smtc_real_init_session</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_init_session))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_init_session &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
</UL>

<P><STRONG><a name="[326]"></a>smtc_real_is_channel_index_valid</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_is_channel_index_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_channel_index_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
</UL>

<P><STRONG><a name="[21a]"></a>smtc_real_is_channel_mask_for_mobile_mode</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, smtc_real.o(i.smtc_real_is_channel_mask_for_mobile_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_channel_mask_for_mobile_mode &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
</UL>

<P><STRONG><a name="[2ee]"></a>smtc_real_is_dtc_supported</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_is_dtc_supported))
<BR><BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
</UL>

<P><STRONG><a name="[156]"></a>smtc_real_is_frequency_valid</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_is_frequency_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_frequency_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_nwk_received_tx_frequency_valid
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_param_setup_parser
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_channel_req_parser
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_freq_req_parser
</UL>

<P><STRONG><a name="[1a5]"></a>smtc_real_is_new_channel_req_supported</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_is_new_channel_req_supported))
<BR><BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
</UL>

<P><STRONG><a name="[327]"></a>smtc_real_is_nwk_received_tx_frequency_valid</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_is_nwk_received_tx_frequency_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_nwk_received_tx_frequency_valid &rArr; smtc_real_is_frequency_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_frequency_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
</UL>

<P><STRONG><a name="[2cf]"></a>smtc_real_is_payload_size_valid</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, smtc_real.o(i.smtc_real_is_payload_size_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_payload_size_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
</UL>

<P><STRONG><a name="[29c]"></a>smtc_real_is_rx1_dr_offset_valid</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_is_rx1_dr_offset_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_rx1_dr_offset_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_param_setup_parser
</UL>

<P><STRONG><a name="[29d]"></a>smtc_real_is_rx_dr_valid</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_is_rx_dr_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_rx_dr_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rx_param_setup_parser
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ping_slot_channel_req_parser
</UL>

<P><STRONG><a name="[2e4]"></a>smtc_real_is_supported_region</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_is_supported_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_supported_region &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_set_region
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[21c]"></a>smtc_real_is_tx_dr_acceptable</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_is_tx_dr_acceptable))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_tx_dr_acceptable &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decrement_dr_simulation
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
</UL>

<P><STRONG><a name="[328]"></a>smtc_real_is_tx_dr_valid</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_is_tx_dr_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_tx_dr_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
</UL>

<P><STRONG><a name="[3fa]"></a>smtc_real_is_tx_param_setup_req_supported</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, smtc_real.o(i.smtc_real_is_tx_param_setup_req_supported))
<BR><BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tx_param_setup_parser
</UL>

<P><STRONG><a name="[21d]"></a>smtc_real_is_tx_power_valid</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_is_tx_power_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_is_tx_power_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
</UL>

<P><STRONG><a name="[1dc]"></a>smtc_real_lora_dr_to_sf_bw</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_lora_dr_to_sf_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_lora_dr_to_sf_bw
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_lora_dr_to_sf_bw
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_sf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_bw
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
</UL>

<P><STRONG><a name="[2c7]"></a>smtc_real_lr_fhss_dr_to_cr_bw</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, smtc_real.o(i.smtc_real_lr_fhss_dr_to_cr_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_real_lr_fhss_dr_to_cr_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[2c8]"></a>smtc_real_lr_fhss_get_grid</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_lr_fhss_get_grid))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_lr_fhss_get_grid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[2c9]"></a>smtc_real_lr_fhss_get_header_count</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_lr_fhss_get_header_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = smtc_real_lr_fhss_get_header_count &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[3e8]"></a>smtc_real_mask_tx_dr_channel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_mask_tx_dr_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = smtc_real_mask_tx_dr_channel &rArr; SMTC_GET_BIT8
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_mask_tx_dr_channel_up_dwell_time_check
</UL>

<P><STRONG><a name="[260]"></a>smtc_real_mask_tx_dr_channel_up_dwell_time_check</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_mask_tx_dr_channel_up_dwell_time_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = smtc_real_mask_tx_dr_channel_up_dwell_time_check &rArr; SMTC_PUT_BIT16 &rArr; SMTC_SET_BIT16
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT16
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_mask_tx_dr_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_mask_tx_dr_channel_up_dwell_time_check
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_dr
</UL>

<P><STRONG><a name="[32a]"></a>smtc_real_set_channel_dr</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, smtc_real.o(i.smtc_real_set_channel_dr))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = smtc_real_set_channel_dr &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT16
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
</UL>

<P><STRONG><a name="[32b]"></a>smtc_real_set_channel_enabled</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_set_channel_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_set_channel_enabled &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT8
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
</UL>

<P><STRONG><a name="[21b]"></a>smtc_real_set_channel_mask</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, smtc_real.o(i.smtc_real_set_channel_mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_real_set_channel_mask &rArr; region_ww2g4_set_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_set_channel_mask
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_update_cflist
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
</UL>

<P><STRONG><a name="[2e2]"></a>smtc_real_set_dr_distribution</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_set_dr_distribution))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtc_real_set_dr_distribution
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_join
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_dr_strategy_set
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
</UL>

<P><STRONG><a name="[21e]"></a>smtc_real_set_power</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_set_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_set_power &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;link_adr_parser
</UL>

<P><STRONG><a name="[1a7]"></a>smtc_real_set_rx1_frequency_channel</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_set_rx1_frequency_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_set_rx1_frequency_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dl_channel_parser
</UL>

<P><STRONG><a name="[2b9]"></a>smtc_real_set_rx_config</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_set_rx_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = smtc_real_set_rx_config &rArr; region_ww2g4_set_rx_config &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;region_ww2g4_set_rx_config
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_timer_configure
</UL>

<P><STRONG><a name="[329]"></a>smtc_real_set_tx_frequency_channel</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, smtc_real.o(i.smtc_real_set_tx_frequency_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = smtc_real_set_tx_frequency_channel &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_channel_parser
</UL>

<P><STRONG><a name="[29a]"></a>smtc_real_update_cflist</STRONG> (Thumb, 530 bytes, Stack size 32 bytes, smtc_real.o(i.smtc_real_update_cflist))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = smtc_real_update_cflist &rArr; smtc_real_build_channel_mask &rArr; region_ww2g4_build_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_PUT_BIT8
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT8
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMTC_GET_BIT16
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_mask
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_nwk_received_tx_frequency_valid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decode_freq_from_buf
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_build_channel_mask
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_init_channel_mask
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_number_of_chmask_in_cflist
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_cf_list_type_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
</UL>

<P><STRONG><a name="[3ba]"></a>smtc_secure_element_aes_encrypt</STRONG> (Thumb, 120 bytes, Stack size 280 bytes, soft_se.o(i.smtc_secure_element_aes_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key_by_id
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_set_key
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_process_join_accept
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_derive_and_store_key
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_payload_encrypt
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_get_class_b_rand
</UL>

<P><STRONG><a name="[194]"></a>smtc_secure_element_compute_aes_cmac</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, soft_se.o(i.smtc_secure_element_compute_aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = smtc_secure_element_compute_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_compute_join_mic
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mic
</UL>

<P><STRONG><a name="[19d]"></a>smtc_secure_element_derive_and_store_key</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, soft_se.o(i.smtc_secure_element_derive_and_store_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_set_key
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_session_key_1_0_x
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_multicast_root_key
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;derive_multicast_key_encryption_key
</UL>

<P><STRONG><a name="[242]"></a>smtc_secure_element_get_deveui</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, soft_se.o(i.smtc_secure_element_get_deveui))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_deveui
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
</UL>

<P><STRONG><a name="[247]"></a>smtc_secure_element_get_joineui</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, soft_se.o(i.smtc_secure_element_get_joineui))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_joineui
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
</UL>

<P><STRONG><a name="[3cc]"></a>smtc_secure_element_init</STRONG> (Thumb, 50 bytes, Stack size 416 bytes, soft_se.o(i.smtc_secure_element_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = smtc_secure_element_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
</UL>

<P><STRONG><a name="[3bb]"></a>smtc_secure_element_process_join_accept</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, soft_se.o(i.smtc_secure_element_process_join_accept))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = smtc_secure_element_process_join_accept &rArr; smtc_secure_element_verify_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_verify_aes_cmac
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_process_join_accept
</UL>

<P><STRONG><a name="[16b]"></a>smtc_secure_element_restore_context</STRONG> (Thumb, 98 bytes, Stack size 832 bytes, soft_se.o(i.smtc_secure_element_restore_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 1464 + Unknown Stack Size
<LI>Call Chain = smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ce_crc
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_store_context
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;certification_event_handler
</UL>

<P><STRONG><a name="[27e]"></a>smtc_secure_element_set_deveui</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, soft_se.o(i.smtc_secure_element_set_deveui))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_deveui
</UL>

<P><STRONG><a name="[27f]"></a>smtc_secure_element_set_joineui</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, soft_se.o(i.smtc_secure_element_set_joineui))
<BR><BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_joineui
</UL>

<P><STRONG><a name="[3b9]"></a>smtc_secure_element_set_key</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, soft_se.o(i.smtc_secure_element_set_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_set_key
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_derive_and_store_key
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_get_class_b_rand
</UL>

<P><STRONG><a name="[3cf]"></a>smtc_secure_element_store_context</STRONG> (Thumb, 60 bytes, Stack size 424 bytes, soft_se.o(i.smtc_secure_element_store_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 1888 + Unknown Stack Size
<LI>Call Chain = smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_ce_crc
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_restore_context
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_certification_mode
</UL>

<P><STRONG><a name="[3bc]"></a>smtc_secure_element_verify_aes_cmac</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, soft_se.o(i.smtc_secure_element_verify_aes_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = smtc_secure_element_verify_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_cmac
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_process_join_accept
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_verify_mic
</UL>

<P><STRONG><a name="[3ea]"></a>soft_ce_crc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, soft_se.o(i.soft_ce_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = soft_ce_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_store_context
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_restore_context
</UL>

<P><STRONG><a name="[330]"></a>sx128x_clear_irq_status</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_clear_irq_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_clear_irq_status &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_clear_irq_status
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_and_clear_irq_status
</UL>

<P><STRONG><a name="[3f8]"></a>sx128x_convert_freq_in_hz_to_pll_step</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx128x.o(i.sx128x_convert_freq_in_hz_to_pll_step))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sx128x_convert_freq_in_hz_to_pll_step
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rf_freq
</UL>

<P><STRONG><a name="[33c]"></a>sx128x_get_and_clear_irq_status</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_get_and_clear_irq_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_get_and_clear_irq_status &rArr; sx128x_get_irq_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_irq_status
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_clear_irq_status
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_and_clear_irq_status
</UL>

<P><STRONG><a name="[332]"></a>sx128x_get_flrc_br_bw_param</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_get_flrc_br_bw_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sx128x_get_flrc_br_bw_param
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_flrc_mod_params_from_ral
</UL>

<P><STRONG><a name="[3ee]"></a>sx128x_get_flrc_br_in_bps</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, sx128x.o(i.sx128x_get_flrc_br_in_bps))
<BR><BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_time_on_air_in_ms
</UL>

<P><STRONG><a name="[33e]"></a>sx128x_get_flrc_pkt_status</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_get_flrc_pkt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_get_flrc_pkt_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_flrc_rx_pkt_status
</UL>

<P><STRONG><a name="[340]"></a>sx128x_get_flrc_time_on_air_in_ms</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, sx128x.o(i.sx128x_get_flrc_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = sx128x_get_flrc_time_on_air_in_ms &rArr; sx128x_get_flrc_time_on_air_numerator
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_time_on_air_numerator
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_br_in_bps
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_flrc_time_on_air_in_ms
</UL>

<P><STRONG><a name="[3ed]"></a>sx128x_get_flrc_time_on_air_numerator</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_get_flrc_time_on_air_numerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sx128x_get_flrc_time_on_air_numerator
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_time_on_air_in_ms
</UL>

<P><STRONG><a name="[334]"></a>sx128x_get_gfsk_br_bw_param</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_get_gfsk_br_bw_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sx128x_get_gfsk_br_bw_param
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_gfsk_mod_params_from_ral
</UL>

<P><STRONG><a name="[335]"></a>sx128x_get_gfsk_br_in_bps</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, sx128x.o(i.sx128x_get_gfsk_br_in_bps))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_time_on_air_in_ms
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_gfsk_mod_params_from_ral
</UL>

<P><STRONG><a name="[336]"></a>sx128x_get_gfsk_mod_ind_param</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_get_gfsk_mod_ind_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sx128x_get_gfsk_mod_ind_param
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_gfsk_mod_params_from_ral
</UL>

<P><STRONG><a name="[341]"></a>sx128x_get_gfsk_pkt_status</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_get_gfsk_pkt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_get_gfsk_pkt_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_gfsk_rx_pkt_status
</UL>

<P><STRONG><a name="[343]"></a>sx128x_get_gfsk_time_on_air_in_ms</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, sx128x.o(i.sx128x_get_gfsk_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = sx128x_get_gfsk_time_on_air_in_ms &rArr; sx128x_get_gfsk_time_on_air_numerator
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_time_on_air_numerator
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_br_in_bps
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_gfsk_time_on_air_in_ms
</UL>

<P><STRONG><a name="[3ef]"></a>sx128x_get_gfsk_time_on_air_numerator</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sx128x.o(i.sx128x_get_gfsk_time_on_air_numerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = sx128x_get_gfsk_time_on_air_numerator
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_time_on_air_in_ms
</UL>

<P><STRONG><a name="[344]"></a>sx128x_get_irq_status</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_get_irq_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_get_irq_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_irq_status
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_and_clear_irq_status
</UL>

<P><STRONG><a name="[3f2]"></a>sx128x_get_lora_bw_in_hz</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, sx128x.o(i.sx128x_get_lora_bw_in_hz))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_time_on_air_in_ms
</UL>

<P><STRONG><a name="[34e]"></a>sx128x_get_lora_pkt_len</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_get_lora_pkt_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sx128x_get_lora_pkt_len &rArr; sx128x_read_register &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_pkt_payload
</UL>

<P><STRONG><a name="[34d]"></a>sx128x_get_lora_pkt_len_mode</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_get_lora_pkt_len_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_get_lora_pkt_len_mode &rArr; sx128x_read_register &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_pkt_payload
</UL>

<P><STRONG><a name="[349]"></a>sx128x_get_lora_pkt_status</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_get_lora_pkt_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_get_lora_pkt_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_rx_pkt_status
</UL>

<P><STRONG><a name="[346]"></a>sx128x_get_lora_rx_pkt_cr</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_get_lora_rx_pkt_cr))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_get_lora_rx_pkt_cr &rArr; sx128x_read_register &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_rx_pkt_cr_crc
</UL>

<P><STRONG><a name="[348]"></a>sx128x_get_lora_rx_pkt_crc_present</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_get_lora_rx_pkt_crc_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_get_lora_rx_pkt_crc_present &rArr; sx128x_read_register &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_rx_pkt_cr_crc
</UL>

<P><STRONG><a name="[34a]"></a>sx128x_get_lora_time_on_air_in_ms</STRONG> (Thumb, 40 bytes, Stack size 20 bytes, sx128x.o(i.sx128x_get_lora_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sx128x_get_lora_time_on_air_in_ms &rArr; sx128x_get_lora_time_on_air_numerator
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_time_on_air_numerator
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_bw_in_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_time_on_air_in_ms
</UL>

<P><STRONG><a name="[3f1]"></a>sx128x_get_lora_time_on_air_numerator</STRONG> (Thumb, 416 bytes, Stack size 60 bytes, sx128x.o(i.sx128x_get_lora_time_on_air_numerator))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = sx128x_get_lora_time_on_air_numerator
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_time_on_air_in_ms
</UL>

<P><STRONG><a name="[34c]"></a>sx128x_get_pkt_type</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_get_pkt_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_get_pkt_type &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_pkt_type
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_pkt_payload
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_wakeup
</UL>

<P><STRONG><a name="[350]"></a>sx128x_get_rssi_inst</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_get_rssi_inst))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_get_rssi_inst &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_rssi_inst
</UL>

<P><STRONG><a name="[34b]"></a>sx128x_get_rx_buffer_status</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_get_rx_buffer_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_get_rx_buffer_status &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_pkt_payload
</UL>

<P><STRONG><a name="[3ec]"></a>sx128x_hal_read</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, sx128x_hal.o(i.sx128x_hal_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_value
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_in_out
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_register
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_buffer
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_rx_buffer_status
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_rssi_inst
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_pkt_type
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_pkt_status
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_irq_status
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_pkt_status
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_pkt_status
</UL>

<P><STRONG><a name="[3f6]"></a>sx128x_hal_reset</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sx128x_hal.o(i.sx128x_hal_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sx128x_hal_reset &rArr; hal_gpio_set_value &rArr; am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_value
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_wait_us
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_reset
</UL>

<P><STRONG><a name="[3f5]"></a>sx128x_hal_wakeup</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx128x_hal.o(i.sx128x_hal_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sx128x_hal_wakeup &rArr; sx128x_hal_check_device_ready &rArr; sx128x_hal_wait_on_busy &rArr; hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_check_device_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_wakeup
</UL>

<P><STRONG><a name="[3eb]"></a>sx128x_hal_write</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sx128x_hal.o(i.sx128x_hal_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_value
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_in_out
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_wakeup
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_check_device_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_buffer
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx_params
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx_infinite_preamble
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx_cw
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_tx
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_standby
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_sleep
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rx_duty_cycle
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rx
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rf_freq_in_pll_steps
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_reg_mode
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_pkt_type
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_pkt_params
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_mod_params
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_pkt_params
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_mod_params
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_pkt_params
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_mod_params
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_dio_irq_params
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_cad
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_buffer_base_address
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_auto_fs
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_save_context
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_clear_irq_status
</UL>

<P><STRONG><a name="[34f]"></a>sx128x_read_buffer</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_read_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_read_buffer &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_pkt_payload
</UL>

<P><STRONG><a name="[3f0]"></a>sx128x_read_register</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_read_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_read_register &rArr; sx128x_hal_read &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_read
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_sync_word
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_mod_params
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_rx_pkt_crc_present
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_rx_pkt_cr
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_pkt_len_mode
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_lora_pkt_len
</UL>

<P><STRONG><a name="[353]"></a>sx128x_reset</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx128x.o(i.sx128x_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sx128x_reset &rArr; sx128x_hal_reset &rArr; hal_gpio_set_value &rArr; am_hal_gpio_state_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_reset
</UL>

<P><STRONG><a name="[36a]"></a>sx128x_save_context</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_save_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sx128x_save_context &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_sleep
</UL>

<P><STRONG><a name="[369]"></a>sx128x_set_auto_fs</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_auto_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_auto_fs &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_rx_tx_fallback_mode
</UL>

<P><STRONG><a name="[363]"></a>sx128x_set_buffer_base_address</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_buffer_base_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_buffer_base_address &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_pkt_payload
</UL>

<P><STRONG><a name="[35f]"></a>sx128x_set_cad</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_cad))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sx128x_set_cad &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_lora_cad
</UL>

<P><STRONG><a name="[354]"></a>sx128x_set_dio_irq_params</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, sx128x.o(i.sx128x_set_dio_irq_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sx128x_set_dio_irq_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_dio_irq_params
</UL>

<P><STRONG><a name="[355]"></a>sx128x_set_flrc_crc_seed</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_flrc_crc_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sx128x_set_flrc_crc_seed &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_flrc_crc_params
</UL>

<P><STRONG><a name="[356]"></a>sx128x_set_flrc_mod_params</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_flrc_mod_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_flrc_mod_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_flrc_mod_params
</UL>

<P><STRONG><a name="[357]"></a>sx128x_set_flrc_pkt_params</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_flrc_pkt_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_flrc_pkt_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_flrc_pkt_params
</UL>

<P><STRONG><a name="[358]"></a>sx128x_set_flrc_sync_word</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_flrc_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_set_flrc_sync_word &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_flrc_sync_word
</UL>

<P><STRONG><a name="[35e]"></a>sx128x_set_gfsk_ble_whitening_seed</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_gfsk_ble_whitening_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sx128x_set_gfsk_ble_whitening_seed &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_whitening_seed
</UL>

<P><STRONG><a name="[35a]"></a>sx128x_set_gfsk_crc_polynomial</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_gfsk_crc_polynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sx128x_set_gfsk_crc_polynomial &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_crc_params
</UL>

<P><STRONG><a name="[359]"></a>sx128x_set_gfsk_crc_seed</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_gfsk_crc_seed))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = sx128x_set_gfsk_crc_seed &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_crc_params
</UL>

<P><STRONG><a name="[35b]"></a>sx128x_set_gfsk_mod_params</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_gfsk_mod_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_gfsk_mod_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_mod_params
</UL>

<P><STRONG><a name="[35c]"></a>sx128x_set_gfsk_pkt_params</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_gfsk_pkt_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_gfsk_pkt_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_pkt_params
</UL>

<P><STRONG><a name="[35d]"></a>sx128x_set_gfsk_sync_word</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, sx128x.o(i.sx128x_set_gfsk_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = sx128x_set_gfsk_sync_word &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_sync_word
</UL>

<P><STRONG><a name="[360]"></a>sx128x_set_lora_mod_params</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_lora_mod_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_set_lora_mod_params &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_lora_mod_params
</UL>

<P><STRONG><a name="[361]"></a>sx128x_set_lora_pkt_params</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_set_lora_pkt_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = sx128x_set_lora_pkt_params &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_lora_pkt_params
</UL>

<P><STRONG><a name="[362]"></a>sx128x_set_lora_sync_word</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_lora_sync_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_set_lora_sync_word &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_read_register
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_lora_sync_word
</UL>

<P><STRONG><a name="[365]"></a>sx128x_set_pkt_type</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_pkt_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_pkt_type &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_pkt_type
</UL>

<P><STRONG><a name="[352]"></a>sx128x_set_reg_mode</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_reg_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_reg_mode &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_init
</UL>

<P><STRONG><a name="[366]"></a>sx128x_set_rf_freq</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_rf_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = sx128x_set_rf_freq &rArr; sx128x_set_rf_freq_in_pll_steps &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rf_freq_in_pll_steps
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_convert_freq_in_hz_to_pll_step
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_rf_freq
</UL>

<P><STRONG><a name="[3f9]"></a>sx128x_set_rf_freq_in_pll_steps</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_rf_freq_in_pll_steps))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_rf_freq_in_pll_steps &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_rf_freq
</UL>

<P><STRONG><a name="[367]"></a>sx128x_set_rx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_rx &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_rx
</UL>

<P><STRONG><a name="[368]"></a>sx128x_set_rx_duty_cycle</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_set_rx_duty_cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_set_rx_duty_cycle &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_rx_duty_cycle
</UL>

<P><STRONG><a name="[36b]"></a>sx128x_set_sleep</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_sleep &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_sleep
</UL>

<P><STRONG><a name="[36c]"></a>sx128x_set_standby</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_standby &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_standby
</UL>

<P><STRONG><a name="[36d]"></a>sx128x_set_tx</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_tx &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_tx
</UL>

<P><STRONG><a name="[36f]"></a>sx128x_set_tx_cw</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_tx_cw))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sx128x_set_tx_cw &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_tx_cw
</UL>

<P><STRONG><a name="[370]"></a>sx128x_set_tx_infinite_preamble</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, sx128x.o(i.sx128x_set_tx_infinite_preamble))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = sx128x_set_tx_infinite_preamble &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_tx_infinite_preamble
</UL>

<P><STRONG><a name="[36e]"></a>sx128x_set_tx_params</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_set_tx_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = sx128x_set_tx_params &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_tx_cfg
</UL>

<P><STRONG><a name="[371]"></a>sx128x_wakeup</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sx128x.o(i.sx128x_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = sx128x_wakeup &rArr; sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_wakeup
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_write_register
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_pkt_type
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_wakeup
</UL>

<P><STRONG><a name="[364]"></a>sx128x_write_buffer</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_write_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_write_buffer &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_pkt_payload
</UL>

<P><STRONG><a name="[3f7]"></a>sx128x_write_register</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sx128x.o(i.sx128x_write_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = sx128x_write_register &rArr; sx128x_hal_write &rArr; hal_spi_in_out &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_wakeup
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_sync_word
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_pkt_params
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_lora_mod_params
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_sync_word
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_crc_seed
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_crc_polynomial
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_gfsk_ble_whitening_seed
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_sync_word
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_set_flrc_crc_seed
</UL>

<P><STRONG><a name="[4c]"></a>test_mode_cw_callback_for_rp</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, smtc_modem_test.o(i.test_mode_cw_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = test_mode_cw_callback_for_rp &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_modem_test.o(i.smtc_modem_test_tx_cw)
</UL>
<P><STRONG><a name="[2fe]"></a>test_radio</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, tx_rx_test.o(i.test_radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 1072 + Unknown Stack Size
<LI>Call Chain = test_radio &rArr; smtc_modem_init &rArr; smtc_secure_element_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_init
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_init
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_enable_irq
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_disable_irq
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_spi_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_gpio_pinconfig
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_init
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mcu_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32]"></a>test_timer0</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, smtc_hal_lp_timer.o(i.test_timer0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = test_timer0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_hal_lp_timer.o(i.hal_lp_timer_start)
</UL>
<P><STRONG><a name="[33]"></a>timer1_callback</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, smtc_hal_rtc.o(i.timer1_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = timer1_callback &rArr; hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_hal_rtc.o(i.hal_rtc_init)
</UL>
<P><STRONG><a name="[41]"></a>uart_print</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, main.o(i.uart_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_trace_print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[48]"></a>user_radio_access_callback</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, smtc_modem.o(i.user_radio_access_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = user_radio_access_callback &rArr; increment_asynchronous_msgnumber &rArr; get_modem_event_count &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_modem.o(i.smtc_modem_init)
</UL>
<P><STRONG><a name="[12b]"></a>validate_transaction</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, am_hal_iom.o(i.validate_transaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = validate_transaction
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_blocking_fullduplex
</UL>

<P><STRONG><a name="[c1]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[30]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[148]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[3fb]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3fd]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[ba]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[436]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[437]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[3fc]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[9c]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[a0]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1f8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, smtc_hal_gpio.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_irq_enable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
</UL>

<P><STRONG><a name="[1f7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, smtc_hal_gpio.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_irq_enable
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_in
</UL>

<P><STRONG><a name="[1ff]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, smtc_hal_lp_timer.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_start
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_lp_timer_irq_enable
</UL>

<P><STRONG><a name="[52]"></a>get_event</STRONG> (Thumb, 500 bytes, Stack size 280 bytes, tx_rx_test.o(i.get_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064 + Unknown Stack Size
<LI>Call Chain = get_event &rArr; smtc_modem_set_region &rArr; set_modem_region &rArr; lorawan_api_set_region &rArr; lr1mac_core_set_region &rArr; smtc_real_config &rArr; smtc_lbt_init &rArr; rp_hook_init &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_printf
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_region
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_nwkkey
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_joineui
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_deveui
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tx_rx_test.o(i.test_radio)
</UL>
<P><STRONG><a name="[140]"></a>decstr_to_int</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, am_util_stdio.o(i.decstr_to_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = decstr_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[325]"></a>divu64_10</STRONG> (Thumb, 204 bytes, Stack size 36 bytes, am_util_stdio.o(i.divu64_10))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>

<P><STRONG><a name="[149]"></a>ftoa</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, am_util_stdio.o(i.ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uint64_to_str
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[143]"></a>ndigits_in_hex</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, am_util_stdio.o(i.ndigits_in_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ndigits_in_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[147]"></a>ndigits_in_i64</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_i64))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = ndigits_in_i64 &rArr; ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[145]"></a>ndigits_in_u64</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, am_util_stdio.o(i.ndigits_in_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = ndigits_in_u64 &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ndigits_in_i64
</UL>

<P><STRONG><a name="[142]"></a>padbuffer</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, am_util_stdio.o(i.padbuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = padbuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[141]"></a>simple_strlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, am_util_stdio.o(i.simple_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[144]"></a>uint64_to_hexstr</STRONG> (Thumb, 138 bytes, Stack size 44 bytes, am_util_stdio.o(i.uint64_to_hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = uint64_to_hexstr
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
</UL>

<P><STRONG><a name="[146]"></a>uint64_to_str</STRONG> (Thumb, 112 bytes, Stack size 64 bytes, am_util_stdio.o(i.uint64_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;divu64_10
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_util_stdio_vsprintf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ftoa
</UL>

<P><STRONG><a name="[3f3]"></a>sx128x_hal_check_device_ready</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sx128x_hal.o(i.sx128x_hal_check_device_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sx128x_hal_check_device_ready &rArr; sx128x_hal_wait_on_busy &rArr; hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_set_value
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_wait_on_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_write
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_wakeup
</UL>

<P><STRONG><a name="[3f4]"></a>sx128x_hal_wait_on_busy</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx128x_hal.o(i.sx128x_hal_wait_on_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sx128x_hal_wait_on_busy &rArr; hal_gpio_init_out &rArr; am_hal_gpio_pinconfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_get_value
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_hal_check_device_ready
</UL>

<P><STRONG><a name="[34]"></a>lorawan_api_class_a_downlink_callback</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_class_a_downlink_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = lorawan_api_class_a_downlink_callback &rArr; modem_supervisor_update_downlink_frame &rArr; dm_downlink &rArr; dm_parse_cmd &rArr; dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_print_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_api.o(i.lorawan_api_init)
</UL>
<P><STRONG><a name="[39]"></a>lorawan_api_class_b_beacon_callback</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_class_b_beacon_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = lorawan_api_class_b_beacon_callback &rArr; modem_supervisor_update_downlink_frame &rArr; dm_downlink &rArr; dm_parse_cmd &rArr; dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_print_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_api.o(i.lorawan_api_init)
</UL>
<P><STRONG><a name="[37]"></a>lorawan_api_class_b_downlink_callback</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_class_b_downlink_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = lorawan_api_class_b_downlink_callback &rArr; modem_supervisor_update_downlink_frame &rArr; dm_downlink &rArr; dm_parse_cmd &rArr; dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_print_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_api.o(i.lorawan_api_init)
</UL>
<P><STRONG><a name="[35]"></a>lorawan_api_class_c_downlink_callback</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lorawan_api.o(i.lorawan_api_class_c_downlink_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 1416 + Unknown Stack Size
<LI>Call Chain = lorawan_api_class_c_downlink_callback &rArr; modem_supervisor_update_downlink_frame &rArr; dm_downlink &rArr; dm_parse_cmd &rArr; dm_set_conf &rArr; smtc_modem_leave_network &rArr; modem_leave &rArr; lorawan_api_class_b_enabled &rArr; smtc_beacon_sniff_start &rArr; beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_downlink_frame
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_set
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_print_stat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lorawan_api.o(i.lorawan_api_init)
</UL>
<P><STRONG><a name="[372]"></a>ral_set_pkt_type</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ralf_sx128x.o(i.ral_set_pkt_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_set_pkt_type
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_lora
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_gfsk
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_flrc
</UL>

<P><STRONG><a name="[373]"></a>ral_set_rf_freq</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, ralf_sx128x.o(i.ral_set_rf_freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_set_rf_freq
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_lora
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_gfsk
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_flrc
</UL>

<P><STRONG><a name="[374]"></a>ral_set_tx_cfg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ralf_sx128x.o(i.ral_set_tx_cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_set_tx_cfg
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_lora
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_gfsk
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ralf_sx128x_setup_flrc
</UL>

<P><STRONG><a name="[1a9]"></a>dm_check_cmd_size</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, dm_downlink.o(i.dm_check_cmd_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = dm_check_cmd_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
</UL>

<P><STRONG><a name="[1ad]"></a>dm_reset</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, dm_downlink.o(i.dm_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = dm_reset &rArr; set_dm_info &rArr; modem_supervisor_add_task_crash_log &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_nb_reset_get
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_context_save
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_info
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_dm_status_now
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_parse_cmd
</UL>

<P><STRONG><a name="[18e]"></a>check_dm_status_max_size</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, modem_context.o(i.check_dm_status_max_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = check_dm_status_max_size &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_status_payload
</UL>

<P><STRONG><a name="[3a4]"></a>convert_requested_dm_info_bytes_to_bitfield</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, modem_context.o(i.convert_requested_dm_info_bytes_to_bitfield))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = convert_requested_dm_info_bytes_to_bitfield
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_info
</UL>

<P><STRONG><a name="[190]"></a>compute_cmac</STRONG> (Thumb, 128 bytes, Stack size 328 bytes, soft_se.o(i.compute_cmac))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Update
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_SetKey
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES_CMAC_Final
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_verify_aes_cmac
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_compute_aes_cmac
</UL>

<P><STRONG><a name="[191]"></a>get_key_by_id</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, soft_se.o(i.get_key_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_key_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_aes_encrypt
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_cmac
</UL>

<P><STRONG><a name="[211]"></a>is_modem_connected</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, smtc_modem.o(i.is_modem_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = is_modem_connected &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_suspend
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_join_state
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dm_get_number_of_days_mute
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_activation_mode
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_muted
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_send_tx
</UL>

<P><STRONG><a name="[3cd]"></a>smtc_modem_send_tx</STRONG> (Thumb, 214 bytes, Stack size 56 bytes, smtc_modem.o(i.smtc_modem_send_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = smtc_modem_send_tx &rArr; is_modem_connected &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_dm_port
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_modem_certification_is_enabled
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_duty_cycle_enable_set
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_s
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_modem_connected
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_request_uplink
</UL>

<P><STRONG><a name="[3d3]"></a>ral_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, smtc_modem_test.o(i.ral_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ral_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_mode_cw_callback_for_rp
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_radio_reset
</UL>

<P><STRONG><a name="[108]"></a>add_round_key</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aes.o(i.add_round_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = add_round_key
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xor_block
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[10a]"></a>copy_and_key</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, aes.o(i.copy_and_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_and_key
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[300]"></a>copy_block</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, aes.o(i.copy_block))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mix_sub_columns
</UL>

<P><STRONG><a name="[10d]"></a>copy_block_nn</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, aes.o(i.copy_block_nn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = copy_block_nn
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_set_key
</UL>

<P><STRONG><a name="[10b]"></a>mix_sub_columns</STRONG> (Thumb, 630 bytes, Stack size 24 bytes, aes.o(i.mix_sub_columns))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_block
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[10c]"></a>shift_sub_rows</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, aes.o(i.shift_sub_rows))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_encrypt
</UL>

<P><STRONG><a name="[109]"></a>xor_block</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, aes.o(i.xor_block))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_round_key
</UL>

<P><STRONG><a name="[14a]"></a>backoff_mobile_static</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, modem_supervisor.o(i.backoff_mobile_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = backoff_mobile_static &rArr; set_modem_adr_profile &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_modem_adr_profile
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_adr_mobile_timeout_config
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_available_new_link_adr_request
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_modem_adr_profile
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_current_no_rx_packet_in_mobile_mode_cnt
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_dr_strategy_get
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[169]"></a>certification_event_handler</STRONG> (Thumb, 954 bytes, Stack size 576 bytes, modem_supervisor.o(i.certification_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2480 + Unknown Stack Size
<LI>Call Chain = certification_event_handler &rArr; smtc_modem_set_certification_mode &rArr; smtc_secure_element_store_context &rArr; smtc_secure_element_restore_context &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_join_network
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_get_event
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_ping_slot_info_req
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_device_time_req
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_is_time_valid
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_ping_slot_info_req_status
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_c_enabled
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_class_b_enabled
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_is_enabled
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_is_cw_running
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_ul_periodicity
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_requested_class
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_frame_type
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_cw_config
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_get_beacon_rx_status_ind_ctrl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_cw_set_as_stopped
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification_build_beacon_rx_status_ind
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_certification
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_state_get
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_set_status_push_network_downlink_to_user
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_dm_set_info_interval
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_alarm_start_timer
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_restore_context
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_leave_network
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_tx_cw
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_stop
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_start
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_test_duty_cycle_app_activate
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_set_certification_mode
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_request_uplink
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[189]"></a>check_class_b_to_generate_event</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, modem_supervisor.o(i.check_class_b_to_generate_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = check_class_b_to_generate_event &rArr; modem_supervisor_add_task_retrieve_dl &rArr; modem_supervisor_add_task &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dm_retrieve_pending_dl
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_get_class_b_status
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_dm_retrieve_pending_dl
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_add_task_retrieve_dl
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_engine
</UL>

<P><STRONG><a name="[323]"></a>send_task_update</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, modem_supervisor.o(i.send_task_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = send_task_update &rArr; increment_asynchronous_msgnumber &rArr; get_modem_event_count &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_get_duty_cycle_disabled_by_host
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_duty_cycle_enable_set
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;increment_asynchronous_msgnumber
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lorawan_api_rx_ack_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modem_supervisor_update_task
</UL>

<P><STRONG><a name="[19a]"></a>ctrl_get</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, fifo_ctrl.o(i.ctrl_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ctrl_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_set
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_get
</UL>

<P><STRONG><a name="[19b]"></a>ctrl_set</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, fifo_ctrl.o(i.ctrl_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ctrl_set &rArr; ctrl_get
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrl_get
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_ctrl_set
</UL>

<P><STRONG><a name="[154]"></a>beacon_freq_req_parser</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, lr1_stack_mac_layer.o(i.beacon_freq_req_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = beacon_freq_req_parser &rArr; smtc_real_is_frequency_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_frequency_valid
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_frequency
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decode_freq_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[1a0]"></a>dev_status_parser</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.dev_status_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = dev_status_parser &rArr; rp_hook_get_id &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_battery_level
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_get_id
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[1a3]"></a>device_time_ans_parser</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.device_time_ans_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = device_time_ans_parser &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[1a4]"></a>dl_channel_parser</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, lr1_stack_mac_layer.o(i.dl_channel_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = dl_channel_parser &rArr; smtc_real_is_frequency_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_frequency_valid
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx1_frequency_channel
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_new_channel_req_supported
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_tx_channel_frequency
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx1_channel_frequency
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decode_freq_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[1d4]"></a>duty_cycle_parser</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.duty_cycle_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = duty_cycle_parser &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[2bc]"></a>frame_header_set</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.frame_header_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = frame_header_set
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_build
</UL>

<P><STRONG><a name="[218]"></a>link_adr_parser</STRONG> (Thumb, 636 bytes, Stack size 40 bytes, lr1_stack_mac_layer.o(i.link_adr_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = link_adr_parser &rArr; smtc_real_build_channel_mask &rArr; region_ww2g4_build_channel_mask &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_power
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_mask
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_power_valid
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_acceptable
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_mask_for_mobile_mode
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_build_channel_mask
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[21f]"></a>link_check_parser</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.link_check_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = link_check_parser &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[295]"></a>lr1_stack_mac_downlink_check_under_it</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.lr1_stack_mac_downlink_check_under_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = lr1_stack_mac_downlink_check_under_it &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rp_callback
</UL>

<P><STRONG><a name="[2a0]"></a>mac_header_set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lr1_stack_mac_layer.o(i.mac_header_set))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_frame_build
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_request_build
</UL>

<P><STRONG><a name="[290]"></a>new_channel_parser</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, lr1_stack_mac_layer.o(i.new_channel_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = new_channel_parser &rArr; smtc_real_set_channel_dr &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_tx_frequency_channel
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_rx1_frequency_channel
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_enabled
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_channel_dr
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_dr_valid
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_nwk_received_tx_frequency_valid
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_new_channel_req_supported
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_channel_index_valid
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_tx_channel_frequency
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decode_freq_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[294]"></a>ping_slot_channel_req_parser</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.ping_slot_channel_req_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ping_slot_channel_req_parser &rArr; smtc_real_is_frequency_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_frequency_valid
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx_dr_valid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decode_freq_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[293]"></a>ping_slot_info_ans_parser</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.ping_slot_info_ans_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = ping_slot_info_ans_parser &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[2b4]"></a>ral_compute_lora_ldro</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, lr1_stack_mac_layer.o(i.ral_compute_lora_ldro))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_radio_start
</UL>

<P><STRONG><a name="[2c6]"></a>ral_get_gfsk_time_on_air_in_ms</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.ral_get_gfsk_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_get_gfsk_time_on_air_in_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[2c5]"></a>ral_get_lora_time_on_air_in_ms</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.ral_get_lora_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_get_lora_time_on_air_in_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[2cb]"></a>ral_lr_fhss_get_time_on_air_in_ms</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lr1_stack_mac_layer.o(i.ral_lr_fhss_get_time_on_air_in_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ral_lr_fhss_get_time_on_air_in_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_toa_get
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_radio_start
</UL>

<P><STRONG><a name="[2ad]"></a>ral_set_dio_irq_params</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.ral_set_dio_irq_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_set_dio_irq_params
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_gfsk_launch_callback_for_rp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp
</UL>

<P><STRONG><a name="[2c0]"></a>ral_set_pkt_payload</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.ral_set_pkt_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_set_pkt_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
</UL>

<P><STRONG><a name="[2af]"></a>ral_set_rx</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.ral_set_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_set_rx
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_gfsk_launch_callback_for_rp
</UL>

<P><STRONG><a name="[2c1]"></a>ral_set_tx</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.ral_set_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ral_set_tx
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp
</UL>

<P><STRONG><a name="[2ac]"></a>ralf_setup_gfsk</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.ralf_setup_gfsk))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ralf_setup_gfsk
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_gfsk_launch_callback_for_rp
</UL>

<P><STRONG><a name="[2b1]"></a>ralf_setup_lora</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.ralf_setup_lora))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ralf_setup_lora
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_lora_launch_callback_for_rp
</UL>

<P><STRONG><a name="[2b0]"></a>rp_stats_set_rx_timestamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lr1_stack_mac_layer.o(i.rp_stats_set_rx_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_lora_launch_callback_for_rp
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_rx_gfsk_launch_callback_for_rp
</UL>

<P><STRONG><a name="[2c2]"></a>rp_stats_set_tx_timestamp</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lr1_stack_mac_layer.o(i.rp_stats_set_tx_timestamp))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lora_launch_callback_for_rp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_gfsk_launch_callback_for_rp
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_tx_lr_fhss_launch_callback_for_rp
</UL>

<P><STRONG><a name="[28f]"></a>rx_param_setup_parser</STRONG> (Thumb, 372 bytes, Stack size 32 bytes, lr1_stack_mac_layer.o(i.rx_param_setup_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 680 + Unknown Stack Size
<LI>Call Chain = rx_param_setup_parser &rArr; smtc_real_is_frequency_valid &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_frequency_valid
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx_dr_valid
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_rx1_dr_offset_valid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_decode_freq_from_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[291]"></a>rx_timing_setup_parser</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, lr1_stack_mac_layer.o(i.rx_timing_setup_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 640 + Unknown Stack Size
<LI>Call Chain = rx_timing_setup_parser &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[292]"></a>tx_param_setup_parser</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, lr1_stack_mac_layer.o(i.tx_param_setup_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = tx_param_setup_parser &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_is_tx_param_setup_req_supported
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>

<P><STRONG><a name="[198]"></a>copy_user_payload</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lr1mac_core.o(i.copy_user_payload))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = copy_user_payload &rArr; memcpy1
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_payload_send
</UL>

<P><STRONG><a name="[2f1]"></a>failsafe_timstamp_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.failsafe_timstamp_get))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[220]"></a>load_devnonce_reset</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lr1mac_core.o(i.load_devnonce_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = load_devnonce_reset &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_utilities_crc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[2f2]"></a>lr1mac_mac_update</STRONG> (Thumb, 286 bytes, Stack size 16 bytes, lr1mac_core.o(i.lr1mac_mac_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = lr1mac_mac_update &rArr; lr1_stack_mac_update &rArr; lr1_stack_toa_get &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_random_nb_in_range
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_set_dr_distribution
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_devnonce_rst
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_next_channel
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_update
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_join_accept
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1_stack_mac_cmd_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[2f8]"></a>rp_status_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lr1mac_core.o(i.rp_status_get))
<BR><BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
</UL>

<P><STRONG><a name="[2f5]"></a>save_devnonce_rst</STRONG> (Thumb, 84 bytes, Stack size 72 bytes, lr1mac_core.o(i.save_devnonce_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = save_devnonce_rst &rArr; smtc_modem_hal_context_store &rArr; hal_flash_write_buffer &rArr; am_util_stdio_printf &rArr; am_util_stdio_vsprintf &rArr; ftoa &rArr; uint64_to_str &rArr; divu64_10
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_store
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_utilities_crc
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_process
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;try_recover_nvm
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_mac_update
</UL>

<P><STRONG><a name="[2e3]"></a>try_recover_nvm</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, lr1mac_core.o(i.try_recover_nvm))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = try_recover_nvm &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_context_restore
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_context_save
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_devnonce_rst
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_utilities_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_init
</UL>

<P><STRONG><a name="[3b4]"></a>smtc_duty_cycle_compute_index</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_compute_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = smtc_duty_cycle_compute_index
</UL>
<BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_sum
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
</UL>

<P><STRONG><a name="[3b0]"></a>smtc_duty_cycle_get_band</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_get_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_duty_cycle_get_band
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_sum
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
</UL>

<P><STRONG><a name="[3af]"></a>smtc_duty_cycle_get_band_consumed_time_ms</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_get_band_consumed_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = smtc_duty_cycle_get_band_consumed_time_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_band_get_available_toa_ms
</UL>

<P><STRONG><a name="[3b2]"></a>smtc_duty_cycle_put_band_in_array</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_put_band_in_array))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = smtc_duty_cycle_put_band_in_array
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
</UL>

<P><STRONG><a name="[3b3]"></a>smtc_duty_cycle_time_diff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, smtc_duty_cycle.o(i.smtc_duty_cycle_time_diff))
<BR><BR>[Called By]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_update
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_sum
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_duty_cycle_get_next_free_time_ms
</UL>

<P><STRONG><a name="[2d8]"></a>lr1mac_class_c_launch</STRONG> (Thumb, 748 bytes, Stack size 224 bytes, lr1mac_class_c.o(i.lr1mac_class_c_launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 960 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_launch &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_sync_word
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_preamble_len
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_gfsk_sync_word
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_compute_lora_ldro
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_start
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_rp_callback
</UL>

<P><STRONG><a name="[2da]"></a>lr1mac_class_c_mac_downlink_check_under_it</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lr1mac_class_c.o(i.lr1mac_class_c_mac_downlink_check_under_it))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_mac_downlink_check_under_it &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rp_callback
</UL>

<P><STRONG><a name="[2db]"></a>lr1mac_class_c_mac_rx_frame_decode</STRONG> (Thumb, 600 bytes, Stack size 64 bytes, lr1mac_class_c.o(i.lr1mac_class_c_mac_rx_frame_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_mac_rx_frame_decode &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_verify_mic
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_payload_decrypt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_min_size_check
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_mhdr_extract
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_fhdr_extract
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_fcnt_dwn_accept
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_max_size_check
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_mac_rp_callback
</UL>

<P><STRONG><a name="[3f]"></a>lr1mac_class_c_rp_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lr1mac_class_c.o(i.lr1mac_class_c_rp_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 976 + Unknown Stack Size
<LI>Call Chain = lr1mac_class_c_rp_callback &rArr; lr1mac_class_c_launch &rArr; rp_task_enqueue &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lr1mac_class_c.o(i.lr1mac_class_c_init)
</UL>
<P><STRONG><a name="[2d9]"></a>ral_compute_lora_ldro</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, lr1mac_class_c.o(i.ral_compute_lora_ldro))
<BR><BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_class_c_launch
</UL>

<P><STRONG><a name="[4e]"></a>ping_slot_mac_rx_lora_launch_callback_for_rp</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, smtc_ping_slot.o(i.ping_slot_mac_rx_lora_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 672 + Unknown Stack Size
<LI>Call Chain = ping_slot_mac_rx_lora_launch_callback_for_rp &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_100us
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_ping_slot.o(i.smtc_ping_slot_start)
</UL>
<P><STRONG><a name="[3d7]"></a>ral_compute_lora_ldro</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, smtc_ping_slot.o(i.ral_compute_lora_ldro))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_compute_downlink_toa
</UL>

<P><STRONG><a name="[3d6]"></a>smtc_ping_slot_compute_downlink_toa</STRONG> (Thumb, 300 bytes, Stack size 88 bytes, smtc_ping_slot.o(i.smtc_ping_slot_compute_downlink_toa))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_compute_downlink_toa &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_preamble_len
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_modulation_type_from_datarate
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_fsk_dr_to_bitrate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_compute_lora_ldro
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rp_callback
</UL>

<P><STRONG><a name="[3dc]"></a>smtc_ping_slot_compute_next_ping_offset_time</STRONG> (Thumb, 168 bytes, Stack size 8 bytes, smtc_ping_slot.o(i.smtc_ping_slot_compute_next_ping_offset_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = smtc_ping_slot_compute_next_ping_offset_time
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_rp_callback
</UL>

<P><STRONG><a name="[3d9]"></a>smtc_ping_slot_get_duration_timeout_ms</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, smtc_ping_slot.o(i.smtc_ping_slot_get_duration_timeout_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 728 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_get_duration_timeout_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_rp_callback
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_search_closest_ping_offset_time
</UL>

<P><STRONG><a name="[3da]"></a>smtc_ping_slot_mac_downlink_check</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, smtc_ping_slot.o(i.smtc_ping_slot_mac_downlink_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_mac_downlink_check &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rp_callback
</UL>

<P><STRONG><a name="[3db]"></a>smtc_ping_slot_mac_rx_frame_decode</STRONG> (Thumb, 766 bytes, Stack size 64 bytes, smtc_ping_slot.o(i.smtc_ping_slot_mac_rx_frame_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 888 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_mac_rx_frame_decode &rArr; lr1mac_core_next_free_duty_cycle_ms_get &rArr; smtc_duty_cycle_get_next_free_time_ms &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy1
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_next_free_duty_cycle_ms_get
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_verify_mic
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_payload_decrypt
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_min_size_check
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_mhdr_extract
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_fhdr_extract
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_fcnt_dwn_accept
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_rx_payload_max_size_check
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_mac_rp_callback
</UL>

<P><STRONG><a name="[3dd]"></a>smtc_ping_slot_search_closest_ping_offset_time</STRONG> (Thumb, 686 bytes, Stack size 16 bytes, smtc_ping_slot.o(i.smtc_ping_slot_search_closest_ping_offset_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 744 + Unknown Stack Size
<LI>Call Chain = smtc_ping_slot_search_closest_ping_offset_time &rArr; smtc_ping_slot_get_duration_timeout_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_get_duration_timeout_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_ping_slot_start
</UL>

<P><STRONG><a name="[152]"></a>beacon_debug_print</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, smtc_beacon_sniff.o(i.beacon_debug_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = beacon_debug_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[159]"></a>beacon_rp_request</STRONG> (Thumb, 344 bytes, Stack size 208 bytes, smtc_beacon_sniff.o(i.beacon_rp_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = beacon_rp_request &rArr; compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_sync_word
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_coding_rate
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_frequency
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_compute_lora_ldro
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_sf
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_rp_task_type
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_length
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_bw
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_start_time
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_start
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[18f]"></a>compute_beacon_metadata</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, smtc_beacon_sniff.o(i.compute_beacon_metadata))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = compute_beacon_metadata &rArr; smtc_real_get_beacon_frequency &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_frequency
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[15b]"></a>compute_start_time</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, smtc_beacon_sniff.o(i.compute_start_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 760 + Unknown Stack Size
<LI>Call Chain = compute_start_time &rArr; smtc_real_get_rx_start_time_offset_ms &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_board_delay_ms
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_radio_tcxo_startup_delay_ms
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_start_time_offset_ms
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[3ad]"></a>crc16_beacon</STRONG> (Thumb, 68 bytes, Stack size 20 bytes, smtc_beacon_sniff.o(i.crc16_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = crc16_beacon
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_gw_specific
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_epoch_time
</UL>

<P><STRONG><a name="[162]"></a>get_beacon_bw</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smtc_beacon_sniff.o(i.get_beacon_bw))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = get_beacon_bw &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[161]"></a>get_beacon_length</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, smtc_beacon_sniff.o(i.get_beacon_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = get_beacon_length &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_gw_specific
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[15a]"></a>get_beacon_rp_task_type</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, smtc_beacon_sniff.o(i.get_beacon_rp_task_type))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[160]"></a>get_beacon_sf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, smtc_beacon_sniff.o(i.get_beacon_sf))
<BR><BR>[Stack]<UL><LI>Max Depth = 696 + Unknown Stack Size
<LI>Call Chain = get_beacon_sf &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_lora_dr_to_sf_bw
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_valid_beacon
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[215]"></a>is_valid_beacon</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, smtc_beacon_sniff.o(i.is_valid_beacon))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = is_valid_beacon &rArr; get_beacon_sf &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lr1mac_core_convert_rtc_to_gps_epoch_time
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_decode_beacon_epoch_time
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_beacon_sf
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[163]"></a>ral_compute_lora_ldro</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, smtc_beacon_sniff.o(i.ral_compute_lora_ldro))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;beacon_rp_request
</UL>

<P><STRONG><a name="[31]"></a>smtc_beacon_sniff_launch_callback_for_rp</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, smtc_beacon_sniff.o(i.smtc_beacon_sniff_launch_callback_for_rp))
<BR><BR>[Stack]<UL><LI>Max Depth = 776 + Unknown Stack Size
<LI>Call Chain = smtc_beacon_sniff_launch_callback_for_rp &rArr; rp_task_abort &rArr; rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_start_radio_tcxo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_get_time_in_ms
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> smtc_beacon_sniff.o(i.beacon_rp_request)
</UL>
<P><STRONG><a name="[3a6]"></a>update_beacon_pll</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, smtc_beacon_sniff.o(i.update_beacon_pll))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = update_beacon_pll &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[3a8]"></a>update_beacon_rx_nb_symb</STRONG> (Thumb, 1672 bytes, Stack size 48 bytes, smtc_beacon_sniff.o(i.update_beacon_rx_nb_symb))
<BR><BR>[Stack]<UL><LI>Max Depth = 808 + Unknown Stack Size
<LI>Call Chain = update_beacon_rx_nb_symb &rArr; smtc_real_get_rx_window_parameters &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_rx_window_parameters
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[3a7]"></a>update_beacon_state</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, smtc_beacon_sniff.o(i.update_beacon_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = update_beacon_state &rArr; smtc_real_get_symbol_duration_us &rArr; smtc_real_lora_dr_to_sf_bw &rArr; region_ww2g4_lora_dr_to_sf_bw &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_symbol_duration_us
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_real_get_beacon_dr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_beacon_sniff_rp_callback
</UL>

<P><STRONG><a name="[192]"></a>compute_mic</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, smtc_modem_crypto.o(i.compute_mic))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = compute_mic &rArr; smtc_secure_element_compute_aes_cmac &rArr; compute_cmac &rArr; AES_CMAC_Final &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_compute_aes_cmac
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prepare_b0
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_compute_and_add_mic
</UL>

<P><STRONG><a name="[19c]"></a>derive_multicast_key_encryption_key</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, smtc_modem_crypto.o(i.derive_multicast_key_encryption_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = derive_multicast_key_encryption_key &rArr; smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_derive_and_store_key
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_set_key
</UL>

<P><STRONG><a name="[19e]"></a>derive_multicast_root_key</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, smtc_modem_crypto.o(i.derive_multicast_root_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = derive_multicast_root_key &rArr; smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_derive_and_store_key
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_set_key
</UL>

<P><STRONG><a name="[19f]"></a>derive_session_key_1_0_x</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, smtc_modem_crypto.o(i.derive_session_key_1_0_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = derive_session_key_1_0_x &rArr; smtc_secure_element_derive_and_store_key &rArr; smtc_secure_element_set_key &rArr; smtc_secure_element_aes_encrypt &rArr; aes_encrypt &rArr; mix_sub_columns
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_secure_element_derive_and_store_key
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_derive_skeys
</UL>

<P><STRONG><a name="[193]"></a>prepare_b0</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, smtc_modem_crypto.o(i.prepare_b0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prepare_b0
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_crypto_verify_mic
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_mic
</UL>

<P><STRONG><a name="[383]"></a>ral_get_tx_consumption_in_ua</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, radio_planner.o(i.ral_get_tx_consumption_in_ua))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ral_get_tx_consumption_in_ua
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_consumption_statistics_updated
</UL>

<P><STRONG><a name="[397]"></a>ral_set_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, radio_planner.o(i.ral_set_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_set_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[382]"></a>rp_consumption_statistics_updated</STRONG> (Thumb, 400 bytes, Stack size 64 bytes, radio_planner.o(i.rp_consumption_statistics_updated))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rp_consumption_statistics_updated &rArr; rp_stats_sniff_update
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_stats_update
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_stats_sniff_update
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_get_tx_consumption_in_ua
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[392]"></a>rp_hook_callback</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, radio_planner.o(i.rp_hook_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rp_hook_callback &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_call_aborted
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[394]"></a>rp_irq_get_status</STRONG> (Thumb, 594 bytes, Stack size 32 bytes, radio_planner.o(i.rp_irq_get_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_store_crashlog
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_set_crashlog_status
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_reset_mcu
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_get_pkt_payload
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[395]"></a>rp_radio_irq</STRONG> (Thumb, 322 bytes, Stack size 16 bytes, radio_planner.o(i.rp_radio_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 736 + Unknown Stack Size
<LI>Call Chain = rp_radio_irq &rArr; rp_irq_get_status &rArr; rp_get_pkt_payload &rArr; smtc_modem_hal_assert_fail &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_stop_radio_tcxo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_get_time_in_ms
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_get_radio_irq_timestamp_in_100us
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_free
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_call_aborted
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_irq_get_status
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_callback
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_consumption_statistics_updated
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq_callback
</UL>

<P><STRONG><a name="[39b]"></a>rp_set_alarm</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, radio_planner.o(i.rp_set_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rp_set_alarm &rArr; rp_hal_timer_start &rArr; smtc_modem_hal_start_timer &rArr; hal_lp_timer_start &rArr; am_hal_ctimer_period_set
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_timer_stop
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_timer_start
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
</UL>

<P><STRONG><a name="[384]"></a>rp_stats_sniff_update</STRONG> (Thumb, 140 bytes, Stack size 28 bytes, radio_planner.o(i.rp_stats_sniff_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = rp_stats_sniff_update
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_consumption_statistics_updated
</UL>

<P><STRONG><a name="[385]"></a>rp_stats_update</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, radio_planner.o(i.rp_stats_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rp_stats_update
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_consumption_statistics_updated
</UL>

<P><STRONG><a name="[399]"></a>rp_task_arbiter</STRONG> (Thumb, 658 bytes, Stack size 40 bytes, radio_planner.o(i.rp_task_arbiter))
<BR><BR>[Stack]<UL><LI>Max Depth = 704 + Unknown Stack Size
<LI>Call Chain = rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_assert_fail
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_stop_radio_tcxo
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_irq_clear_pending
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hal_get_time_in_ms
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_update_time
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_select_next
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_launch_current
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_get_next
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_call_aborted
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_set_alarm
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_consumption_statistics_updated
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_set_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_abort
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_timer_irq
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[398]"></a>rp_task_call_aborted</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, radio_planner.o(i.rp_task_call_aborted))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = rp_task_call_aborted &rArr; rp_hook_callback &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_free
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_hook_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[3a0]"></a>rp_task_compute_ranking</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, radio_planner.o(i.rp_task_compute_ranking))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rp_task_compute_ranking &rArr; rp_task_find_highest_priority
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_find_highest_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_enqueue
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_update_time
</UL>

<P><STRONG><a name="[3a1]"></a>rp_task_find_highest_priority</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, radio_planner.o(i.rp_task_find_highest_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rp_task_find_highest_priority
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_compute_ranking
</UL>

<P><STRONG><a name="[396]"></a>rp_task_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, radio_planner.o(i.rp_task_free))
<BR><BR>[Called By]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_call_aborted
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_radio_irq
</UL>

<P><STRONG><a name="[39f]"></a>rp_task_get_next</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, radio_planner.o(i.rp_task_get_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rp_task_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
</UL>

<P><STRONG><a name="[39e]"></a>rp_task_launch_current</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, radio_planner.o(i.rp_task_launch_current))
<BR><BR>[Stack]<UL><LI>Max Depth = 664 + Unknown Stack Size
<LI>Call Chain = rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_print
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
</UL>

<P><STRONG><a name="[3a2]"></a>rp_task_print</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, radio_planner.o(i.rp_task_print))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_launch_current
</UL>

<P><STRONG><a name="[39d]"></a>rp_task_select_next</STRONG> (Thumb, 362 bytes, Stack size 32 bytes, radio_planner.o(i.rp_task_select_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rp_task_select_next &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
</UL>

<P><STRONG><a name="[39c]"></a>rp_task_update_time</STRONG> (Thumb, 360 bytes, Stack size 16 bytes, radio_planner.o(i.rp_task_update_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 648 + Unknown Stack Size
<LI>Call Chain = rp_task_update_time &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smtc_modem_hal_print_trace
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_compute_ranking
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
</UL>

<P><STRONG><a name="[3a3]"></a>rp_timer_irq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, radio_planner.o(i.rp_timer_irq))
<BR><BR>[Stack]<UL><LI>Max Depth = 712 + Unknown Stack Size
<LI>Call Chain = rp_timer_irq &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_task_arbiter
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_timer_irq_callback
</UL>

<P><STRONG><a name="[42]"></a>rp_timer_irq_callback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, radio_planner.o(i.rp_timer_irq_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = rp_timer_irq_callback &rArr; rp_timer_irq &rArr; rp_task_arbiter &rArr; rp_task_launch_current &rArr; rp_task_print &rArr; smtc_modem_hal_print_trace &rArr; hal_trace_print &rArr; uart_print &rArr; am_hal_uart_transfer &rArr; read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rp_timer_irq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio_planner.o(i.rp_set_alarm)
</UL>
<P><STRONG><a name="[331]"></a>ral_sx128x_convert_flrc_mod_params_from_ral</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ral_sx128x.o(i.ral_sx128x_convert_flrc_mod_params_from_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ral_sx128x_convert_flrc_mod_params_from_ral &rArr; sx128x_get_flrc_br_bw_param
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_flrc_br_bw_param
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_flrc_mod_params
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_flrc_time_on_air_in_ms
</UL>

<P><STRONG><a name="[33f]"></a>ral_sx128x_convert_flrc_pkt_params_from_ral</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_convert_flrc_pkt_params_from_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_sx128x_convert_flrc_pkt_params_from_ral
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_flrc_pkt_params
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_flrc_time_on_air_in_ms
</UL>

<P><STRONG><a name="[333]"></a>ral_sx128x_convert_gfsk_mod_params_from_ral</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, ral_sx128x.o(i.ral_sx128x_convert_gfsk_mod_params_from_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ral_sx128x_convert_gfsk_mod_params_from_ral &rArr; sx128x_get_gfsk_mod_ind_param
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_mod_ind_param
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_br_in_bps
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sx128x_get_gfsk_br_bw_param
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_mod_params
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_gfsk_time_on_air_in_ms
</UL>

<P><STRONG><a name="[342]"></a>ral_sx128x_convert_gfsk_pkt_params_from_ral</STRONG> (Thumb, 184 bytes, Stack size 12 bytes, ral_sx128x.o(i.ral_sx128x_convert_gfsk_pkt_params_from_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ral_sx128x_convert_gfsk_pkt_params_from_ral
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_gfsk_pkt_params
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_gfsk_time_on_air_in_ms
</UL>

<P><STRONG><a name="[32f]"></a>ral_sx128x_convert_irq_flags_from_ral</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_convert_irq_flags_from_ral))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_dio_irq_params
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_clear_irq_status
</UL>

<P><STRONG><a name="[33d]"></a>ral_sx128x_convert_irq_flags_to_ral</STRONG> (Thumb, 136 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_convert_irq_flags_to_ral))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_irq_status
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_and_clear_irq_status
</UL>

<P><STRONG><a name="[338]"></a>ral_sx128x_convert_lora_bw_from_radio</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_convert_lora_bw_from_radio))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_mod_params_from_ral
</UL>

<P><STRONG><a name="[347]"></a>ral_sx128x_convert_lora_cr_to_ral</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ral_sx128x.o(i.ral_sx128x_convert_lora_cr_to_ral))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_rx_pkt_cr_crc
</UL>

<P><STRONG><a name="[337]"></a>ral_sx128x_convert_lora_mod_params_from_ral</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_convert_lora_mod_params_from_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ral_sx128x_convert_lora_mod_params_from_ral
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_bw_from_radio
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_lora_mod_params
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_time_on_air_in_ms
</UL>

<P><STRONG><a name="[339]"></a>ral_sx128x_convert_lora_pbl_len_from_ral</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ral_sx128x.o(i.ral_sx128x_convert_lora_pbl_len_from_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ral_sx128x_convert_lora_pbl_len_from_ral
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shift_and_count_trailing_zeros
</UL>
<BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_pkt_params_from_ral
</UL>

<P><STRONG><a name="[33b]"></a>ral_sx128x_convert_lora_pkt_params_from_ral</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ral_sx128x.o(i.ral_sx128x_convert_lora_pkt_params_from_ral))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ral_sx128x_convert_lora_pkt_params_from_ral &rArr; ral_sx128x_convert_lora_pbl_len_from_ral
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_pbl_len_from_ral
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_set_lora_pkt_params
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_get_lora_time_on_air_in_ms
</UL>

<P><STRONG><a name="[33a]"></a>shift_and_count_trailing_zeros</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, ral_sx128x.o(i.shift_and_count_trailing_zeros))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ral_sx128x_convert_lora_pbl_len_from_ral
</UL>

<P><STRONG><a name="[12d]"></a>internal_iom_reset_on_error</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, am_hal_iom.o(i.internal_iom_reset_on_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = internal_iom_reset_on_error
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_flash_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_iom_spi_blocking_fullduplex
</UL>

<P><STRONG><a name="[136]"></a>read_nonblocking</STRONG> (Thumb, 288 bytes, Stack size 112 bytes, am_hal_uart.o(i.read_nonblocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = read_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
</UL>

<P><STRONG><a name="[135]"></a>write_nonblocking</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, am_hal_uart.o(i.write_nonblocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = write_nonblocking &rArr; am_hal_queue_item_get
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_get
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_queue_item_add
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_set
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_interrupt_master_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am_hal_uart_transfer
</UL>

<P><STRONG><a name="[2f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
